<<<<<<< HEAD
=======
diff netcdf-c/nc_test/t_nc.c cdf5/nc_test/t_nc.c
--- netcdf-c/nc_test/t_nc.c	2014-11-14 15:14:32.036534500 -0700
+++ cdf5/nc_test/t_nc.c	2014-11-14 14:54:46.040133700 -0700
@@ -9,7 +9,7 @@
    Based on a program to test the nasa look-alike program, so not the
    most appropropriate test. See ../nctest for a complete spec test.
  
-   $Id: t_nc.c,v 1.94 2010/05/27 21:34:13 dmh Exp $ */
+   $Id: t_nc.c 2792 2014-10-27 06:02:59Z wkliao $ */
 
 #define REDEF
 /* #define SYNCDEBUG */
@@ -22,7 +22,9 @@
 #include <stdlib.h>
 #include <string.h>
 #include <assert.h>
+#include <mpi.h>
 #include <netcdf.h>
+#include <netcdf_par.h>
 
 #define MAXSHORT	32767
 #define MAXINT		2147483647
@@ -314,7 +316,7 @@
 	return;
 }
 
-static const size_t	indices[][3] = {
+static size_t	indices[][3] = {
 	{0, 1, 3},
 	{0, 3, 0},
 	{1, 2, 3},
@@ -329,19 +331,19 @@
 static const size_t s_edges[] = {NUM_RECS, SIZE_1 - 1};
 static char sentence[NUM_RECS* SIZE_1 -1] =
 	"The red death had long devastated the country.";
-static const short shs[] = {97, 99};
-static const int birthday = 82555;
+static short shs[] = {97, 99};
+static int birthday = 82555;
 #define M_E	2.7182818284590452354
-static const float e = (float) M_E;
-static const double pinot = 3.25;
-static const double zed = 0.0;
+static float e = (float) M_E;
+static double pinot = 3.25;
+static double zed = 0.0;
 
 
 /*ARGSUSED*/
 int
-main(int ac, char *av[])
+main(int argc, char *argv[])
 {
-	int ret;
+	int cmode=NC_CLOBBER, omode, ret;
 	int	 id;
 	char buf[256];
 #ifdef SYNCDEBUG
@@ -355,13 +357,23 @@
 	size_t chunksz = 8192;
 	size_t align = 8192/32;
 
-	ret = nc__create(fname,NC_NOCLOBBER, initialsz, &chunksz, &id);
+#ifdef TEST_PNETCDF
+	MPI_Init(&argc, &argv);
+
+        // cmode |= NC_PNETCDF |NC_64BIT_OFFSET;
+        cmode != NC_PNETCDF |NC_64BIT_DATA;
+	ret = nc_create_par(fname,cmode, MPI_COMM_WORLD, MPI_INFO_NULL, &id);
+#else
+	ret = nc__create(fname,cmode, initialsz, &chunksz, &id);
 	if(ret != NC_NOERR) {
  		/* (void) fprintf(stderr, "trying again\n"); */
-		ret = nc__create(fname,NC_CLOBBER, initialsz, &chunksz, &id);
+		ret = nc__create(fname,cmode, initialsz, &chunksz, &id);
+#endif
 	}
-	if(ret != NC_NOERR) 
+	if(ret != NC_NOERR)  {
+		fprintf(stderr,"Error %s in file %s at line %d\n",nc_strerror(ret),__FILE__,__LINE__);
 		exit(ret);
+        }
 	
 	assert( nc_put_att_text(id, NC_GLOBAL,
 		"TITLE", 12, "another name") == NC_NOERR);
@@ -459,7 +471,13 @@
 /*
  *	read it
  */
-	ret = nc__open(fname,NC_NOWRITE, &chunksz, &id);
+        omode = NC_NOWRITE;
+#ifdef TEST_PNETCDF
+        omode = NC_NOWRITE | NC_PNETCDF;
+#else
+	ret = nc_open_par(fname,omode, MPI_COMM_WORLD, MPI_INFO_NULL, &id);
+	ret = nc__open(fname,omode, &chunksz, &id);
+#endif
 	if(ret != NC_NOERR)
 	{
    	    (void) printf("Could not open %s: %s\n", fname,
@@ -652,5 +670,8 @@
 	ret = nc_close(id);
 	/* (void) printf("re nc_close ret = %d\n", ret); */
 
+#ifdef TEST_PNETCDF
+	MPI_Finalize();
+#endif
 	return 0;
 }
diff netcdf-c/nc_test/test_get.m4 cdf5/nc_test/test_get.m4
--- netcdf-c/nc_test/test_get.m4	2015-03-09 13:48:02.763960300 -0600
+++ cdf5/nc_test/test_get.m4	2014-11-14 14:54:46.051851700 -0700
@@ -7,9 +7,12 @@
 /*********************************************************************
  *   Copyright 1996, UCAR/Unidata
  *   See netcdf/COPYRIGHT file for copying and redistribution conditions.
- *   $Id: test_get.m4,v 1.16 2005/03/08 03:04:19 ed Exp $
+ *   $Id: test_get.m4 2785 2014-10-26 05:21:20Z wkliao $
  *********************************************************************/
 
+// #define TEST_PNETCDF
+#include <mpi.h>
+
 undefine(`index')dnl
 dnl dnl dnl
 dnl
@@ -48,10 +51,14 @@
     int canConvert;     /* Both text or both numeric */
     $1 value;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
 	for (j = 0; j < var_rank[i]; j++)
 	    index[j] = 0;
@@ -122,6 +129,10 @@
 TEST_NC_GET_VAR1(long)
 TEST_NC_GET_VAR1(float)
 TEST_NC_GET_VAR1(double)
+TEST_NC_GET_VAR1(ushort)
+TEST_NC_GET_VAR1(uint)
+TEST_NC_GET_VAR1(longlong)
+TEST_NC_GET_VAR1(ulonglong)
 
 
 dnl TEST_NC_GET_VAR(TYPE)
@@ -144,10 +155,14 @@
     $1 value[MAX_NELS];
     double expect[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
@@ -227,6 +242,10 @@
 TEST_NC_GET_VAR(long)
 TEST_NC_GET_VAR(float)
 TEST_NC_GET_VAR(double)
+TEST_NC_GET_VAR(ushort)
+TEST_NC_GET_VAR(uint)
+TEST_NC_GET_VAR(longlong)
+TEST_NC_GET_VAR(ulonglong)
 
 
 dnl TEST_NC_GET_VARA(TYPE)
@@ -255,10 +274,14 @@
     $1 value[MAX_NELS];
     double expect[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
@@ -407,6 +430,10 @@
 TEST_NC_GET_VARA(long)
 TEST_NC_GET_VARA(float)
 TEST_NC_GET_VARA(double)
+TEST_NC_GET_VARA(ushort)
+TEST_NC_GET_VARA(uint)
+TEST_NC_GET_VARA(longlong)
+TEST_NC_GET_VARA(ulonglong)
 
 
 dnl TEST_NC_GET_VARS(TYPE)
@@ -441,10 +468,14 @@
     $1 value[MAX_NELS];
     double expect[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
@@ -597,6 +628,10 @@
 TEST_NC_GET_VARS(long)
 TEST_NC_GET_VARS(float)
 TEST_NC_GET_VARS(double)
+TEST_NC_GET_VARS(ushort)
+TEST_NC_GET_VARS(uint)
+TEST_NC_GET_VARS(longlong)
+TEST_NC_GET_VARS(ulonglong)
 
 
 dnl TEST_NC_GET_VARM(TYPE)
@@ -632,10 +667,14 @@
     $1 value[MAX_NELS];
     double expect[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
@@ -795,6 +834,10 @@
 TEST_NC_GET_VARM(long)
 TEST_NC_GET_VARM(float)
 TEST_NC_GET_VARM(double)
+TEST_NC_GET_VARM(ushort)
+TEST_NC_GET_VARM(uint)
+TEST_NC_GET_VARM(longlong)
+TEST_NC_GET_VARM(ulonglong)
 
 
 dnl TEST_NC_GET_ATT(TYPE)
@@ -816,11 +859,15 @@
     double expect[MAX_NELS];
     int nok = 0;      /* count of valid comparisons */
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err) 
 	error("nc_open: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         for (j = 0; j < NATTS(i); j++) {
 	    canConvert = (ATT_TYPE(i,j) == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
 	    err = nc_get_att_$1(BAD_ID, i, ATT_NAME(i,j), value);
@@ -897,4 +944,8 @@
 TEST_NC_GET_ATT(long)
 TEST_NC_GET_ATT(float)
 TEST_NC_GET_ATT(double)
+TEST_NC_GET_ATT(ushort)
+TEST_NC_GET_ATT(uint)
+TEST_NC_GET_ATT(longlong)
+TEST_NC_GET_ATT(ulonglong)
 
diff netcdf-c/nc_test/test_put.m4 cdf5/nc_test/test_put.m4
--- netcdf-c/nc_test/test_put.m4	2014-11-14 15:14:32.036534500 -0700
+++ cdf5/nc_test/test_put.m4	2014-11-14 14:54:46.052828200 -0700
@@ -7,9 +7,12 @@
 /*********************************************************************
  *   Copyright 1996, UCAR/Unidata
  *   See netcdf/COPYRIGHT file for copying and redistribution conditions.
- *   $Id: test_put.m4,v 1.25 2005/03/08 03:04:19 ed Exp $
+ *   $Id: test_put.m4 2785 2014-10-26 05:21:20Z wkliao $
  *********************************************************************/
 
+// #define TEST_PNETCDF
+#include <mpi.h>
+
 undefine(`index')dnl
 dnl dnl dnl
 dnl
@@ -61,6 +64,10 @@
 HASH(long)
 HASH(float)
 HASH(double)
+HASH(ushort)
+HASH(uint)
+HASH(longlong)
+HASH(ulonglong)
 
 
 dnl CHECK_VARS(TYPE)
@@ -90,11 +97,15 @@
     int canConvert;     /* Both text or both numeric */
     int nok = 0;      /* count of valid comparisons */
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(filename, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(filename, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
 	if (canConvert) {
 	    err = nc_inq_var(ncid, i, name, &datatype, &ndims, dimids, NULL);
@@ -160,6 +171,10 @@
 CHECK_VARS(long)
 CHECK_VARS(float)
 CHECK_VARS(double)
+CHECK_VARS(ushort)
+CHECK_VARS(uint)
+CHECK_VARS(longlong)
+CHECK_VARS(ulonglong)
 
 
 dnl CHECK_ATTS(TYPE)         numeric only
@@ -187,7 +202,7 @@
     int canConvert;     /* Both text or both numeric */
     int nok = 0;      /* count of valid comparisons */
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         for (j = 0; j < NATTS(i); j++) {
 	    canConvert = (ATT_TYPE(i,j) == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
 	    if (canConvert) {
@@ -250,6 +265,10 @@
 CHECK_ATTS(long)
 CHECK_ATTS(float)
 CHECK_ATTS(double)
+CHECK_ATTS(ushort)
+CHECK_ATTS(uint)
+CHECK_ATTS(longlong)
+CHECK_ATTS(ulonglong)
 
 
 dnl TEST_NC_PUT_VAR1(TYPE)
@@ -267,7 +286,11 @@
     int canConvert;	/* Both text or both numeric */
     $1 value = 5;	/* any value would do - only for error cases */
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -278,7 +301,7 @@
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
         for (j = 0; j < var_rank[i]; j++)
             index[j] = 0;
@@ -345,6 +368,10 @@
 TEST_NC_PUT_VAR1(long)
 TEST_NC_PUT_VAR1(float)
 TEST_NC_PUT_VAR1(double)
+TEST_NC_PUT_VAR1(ushort)
+TEST_NC_PUT_VAR1(uint)
+TEST_NC_PUT_VAR1(longlong)
+TEST_NC_PUT_VAR1(ulonglong)
 
 
 dnl TEST_NC_PUT_VAR(TYPE)
@@ -365,7 +392,11 @@
     int allInExtRange;	/* all values within external range? */
     $1 value[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -376,7 +407,7 @@
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
@@ -427,7 +458,7 @@
     IF (err)
         error("nc_put_var1_text: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         if (var_dimid[i][0] == RECDIM) {  /* only test record variables here */
 	    canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
 	    assert(var_rank[i] <= MAX_RANK);
@@ -483,6 +514,10 @@
 TEST_NC_PUT_VAR(long)
 TEST_NC_PUT_VAR(float)
 TEST_NC_PUT_VAR(double)
+TEST_NC_PUT_VAR(ushort)
+TEST_NC_PUT_VAR(uint)
+TEST_NC_PUT_VAR(longlong)
+TEST_NC_PUT_VAR(ulonglong)
 
 
 dnl TEST_NC_PUT_VARA(TYPE)
@@ -508,7 +543,11 @@
     int allInExtRange;	/* all values within external range? */
     $1 value[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -520,7 +559,7 @@
         error("nc_enddef: %s", nc_strerror(err));
 
     value[0] = 0;
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
@@ -567,6 +606,11 @@
 		start[j] = 0;
 	    }
         }
+
+/* wkliao: this test below of put_vara is redundant and incorrectly uses the
+           value[] set from the previously iteration. There is no such test
+           in put_vars and put_varm.
+
 	err = nc_put_vara_$1(ncid, i, start, edge, value);
 	if (canConvert) {
 	    IF (err) 
@@ -575,6 +619,7 @@
 	    IF (err != NC_ECHAR)
 		error("wrong type: status = %d", err);
         }
+*/
         for (j = 0; j < var_rank[i]; j++) {
             edge[j] = 1;
 	}
@@ -648,6 +693,10 @@
 TEST_NC_PUT_VARA(long)
 TEST_NC_PUT_VARA(float)
 TEST_NC_PUT_VARA(double)
+TEST_NC_PUT_VARA(ushort)
+TEST_NC_PUT_VARA(uint)
+TEST_NC_PUT_VARA(longlong)
+TEST_NC_PUT_VARA(ulonglong)
 
 
 dnl TEST_NC_PUT_VARS(TYPE)
@@ -679,7 +728,11 @@
     int allInExtRange;	/* all values within external range? */
     $1 value[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
 	error("nc_create: %s", nc_strerror(err));
 	return;
@@ -690,7 +743,7 @@
     IF (err)
 	error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
 	assert(var_rank[i] <= MAX_RANK);
 	assert(var_nels[i] <= MAX_NELS);
@@ -821,6 +874,10 @@
 TEST_NC_PUT_VARS(long)
 TEST_NC_PUT_VARS(float)
 TEST_NC_PUT_VARS(double)
+TEST_NC_PUT_VARS(ushort)
+TEST_NC_PUT_VARS(uint)
+TEST_NC_PUT_VARS(longlong)
+TEST_NC_PUT_VARS(ulonglong)
 
 
 dnl TEST_NC_PUT_VARM(TYPE)
@@ -853,7 +910,11 @@
     int allInExtRange;	/* all values within external range? */
     $1 value[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
 	error("nc_create: %s", nc_strerror(err));
 	return;
@@ -864,7 +925,7 @@
     IF (err)
 	error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	canConvert = (var_type[i] == NC_CHAR) == (NCT_ITYPE($1) == NCT_TEXT);
 	assert(var_rank[i] <= MAX_RANK);
 	assert(var_nels[i] <= MAX_NELS);
@@ -1002,6 +1063,10 @@
 TEST_NC_PUT_VARM(long)
 TEST_NC_PUT_VARM(float)
 TEST_NC_PUT_VARM(double)
+TEST_NC_PUT_VARM(ushort)
+TEST_NC_PUT_VARM(uint)
+TEST_NC_PUT_VARM(longlong)
+TEST_NC_PUT_VARM(ulonglong)
 
 
 void
@@ -1014,7 +1079,11 @@
     int err;
     text value[MAX_NELS];
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1030,7 +1099,7 @@
 	IF (err != NC_EBADNAME)
 	   error("should be NC_EBADNAME: status = %d", err);
     }
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         for (j = 0; j < NATTS(i); j++) {
             if (ATT_TYPE(i,j) == NC_CHAR) {
 		assert(ATT_LEN(i,j) <= MAX_NELS);
@@ -1080,7 +1149,11 @@
     $1 value[MAX_NELS];
     int allInExtRange;  /* all values within external range? */
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1088,7 +1161,7 @@
     def_dims(ncid);
     def_vars(ncid);
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         for (j = 0; j < NATTS(i); j++) {
             if (!(ATT_TYPE(i,j) == NC_CHAR)) {
 		assert(ATT_LEN(i,j) <= MAX_NELS);
@@ -1140,4 +1213,8 @@
 TEST_NC_PUT_ATT(long)
 TEST_NC_PUT_ATT(float)
 TEST_NC_PUT_ATT(double)
+TEST_NC_PUT_ATT(ushort)
+TEST_NC_PUT_ATT(uint)
+TEST_NC_PUT_ATT(longlong)
+TEST_NC_PUT_ATT(ulonglong)
 
diff netcdf-c/nc_test/test_read.c cdf5/nc_test/test_read.c
--- netcdf-c/nc_test/test_read.c	2014-11-14 15:14:32.036534500 -0700
+++ cdf5/nc_test/test_read.c	2014-11-14 14:54:46.053804700 -0700
@@ -1,7 +1,7 @@
 /*********************************************************************
  *   Copyright 1996, UCAR/Unidata
  *   See netcdf/COPYRIGHT file for copying and redistribution conditions.
- *   $Id: test_read.c,v 1.32 2008/04/04 20:23:51 dmh Exp $
+ *   $Id: test_read.c 2792 2014-10-27 06:02:59Z wkliao $
  *********************************************************************/
 
 #include "tests.h"
@@ -58,14 +58,14 @@
     /* Try on a bad error status */
     /* Dmh: allow trailing extra info */
     message = nc_strerror(-666);/* should fail */
-    IF (strcmp(message, "Unknown Error") != 0)
+    IF (strncmp(message, "Unknown Error", strlen("Unknown Error")) != 0)
 	error("nc_strerror on bad error status returned: %s", message);
 
     /* Try on each legitimate error status */
     /* Dmh: allow trailing extra info */
     for (i=0; i<LEN_OF(ncerrs); i++) {
 	const char *message = nc_strerror(ncerrs[i].status);
-	IF (strcmp(message, ncerrs[i].msg) != 0)
+	IF (strncmp(message, ncerrs[i].msg, strlen(ncerrs[i].msg)) != 0)
 	    error("nc_strerror(%d) should return `%s', not `%s'",
 		  ncerrs[i].status, ncerrs[i].msg, message);
     }
@@ -92,7 +92,11 @@
     int ncid2;
     
     /* Try to open a nonexistent file */
+#ifdef TEST_PNETCDF
+    err = nc_open_par("tooth-fairy.nc", NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open("tooth-fairy.nc", NC_NOWRITE, &ncid);/* should fail */
+#endif
     IF (err == NC_NOERR)
 	error("nc_open of nonexistent file should have failed");
 #ifndef USE_PARALLEL
@@ -107,14 +111,22 @@
     /* 	error("nc_open of non-netCDF file: status = %d", err); */
 
     /* Open a netCDF file in read-only mode, check that write fails */
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     err = nc_redef(ncid);	/* should fail */
     IF (err != NC_EPERM)
 	error("nc_redef of read-only file should fail");
     /* Opened OK, see if can open again and get a different netCDF ID */
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid2);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid2);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     else {
@@ -123,12 +135,20 @@
     IF (ncid2 == ncid)
 	error("netCDF IDs for first and second nc_open calls should differ");
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid2);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid2);
+#endif
     IF (err) 
        error("nc_create: %s", nc_strerror(err));
     else 
        (void) nc_close(ncid2);
+#ifdef TEST_PNETCDF
+    err = nc_open_par(scratch, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid2);
+#else
     err = nc_open(scratch, NC_WRITE, &ncid2);
+#endif
     IF (err) 
        error("nc_open: %s", nc_strerror(err));
     else 
@@ -152,8 +172,12 @@
 void
 test_nc_close(void)
 {
-    int ncid;
-    int err = nc_open(testfile, NC_NOWRITE, &ncid);
+    int ncid, err;
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
+    err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
 
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
@@ -172,14 +196,22 @@
 	error("nc_close with bad netCDF ID returned wrong error (%d)", err);
 
     /* Close in data mode */
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     err = nc_close(ncid);
     IF (err)
 	error("nc_close in data mode failed: %s", nc_strerror(err));
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) 
        error("nc_create: %s", nc_strerror(err));
     err = nc_close(ncid);
@@ -208,7 +240,12 @@
     int nvars;			/* number of variables */
     int ngatts;			/* number of global attributes */
     int recdim;			/* id of unlimited dimension */
-    int err = nc_open(testfile, NC_NOWRITE, &ncid);
+    int err;
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
+    err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
 
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
@@ -223,9 +260,9 @@
 	error("nc_inq: %s", nc_strerror(err));
     else IF (ndims != NDIMS)
 	error("nc_inq: wrong number of dimensions returned, %d", ndims);
-    else IF (nvars != NVARS)
+    else IF (nvars != numVars)
 	error("nc_inq: wrong number of variables returned, %d", nvars);
-    else IF (ngatts != NGATTS)
+    else IF (ngatts != numGatts)
 	error("nc_inq: wrong number of global atts returned, %d", ngatts);
     else IF (recdim != RECDIM)
 	error("nc_inq: wrong record dimension ID returned, %d", recdim);
@@ -236,26 +273,30 @@
 	error("nc_inq for no info failed: %s", nc_strerror(err));
 
     /* Inguire for subsets of info */
-    ngatts = NGATTS - 1;	/* wipe out previous correct value */
+    ngatts = numGatts - 1;	/* wipe out previous correct value */
     err = nc_inq(ncid, 0, 0, &ngatts, 0);
     IF (err)
 	error("nc_inq for one item failed: %s", nc_strerror(err));
-    else IF (ngatts != NGATTS)
+    else IF (ngatts != numGatts)
 	error("nc_inq subset: wrong number of global atts returned, %d", ngatts);
     ndims = NDIMS - 1;
-    nvars = NVARS - 1;
+    nvars = numVars - 1;
     err = nc_inq(ncid, &ndims, &nvars, 0, 0);
     IF (err)
 	error("nc_inq for two items failed: %s", nc_strerror(err));
     else IF (ndims != NDIMS)
 	error("nc_inq subset: wrong number of dimensions returned, %d", ndims);
-    else IF (nvars != NVARS)
+    else IF (nvars != numVars)
 	error("nc_inq subset: wrong number of variables returned, %d", nvars);
 
     {		/* tests using netCDF scratch file */
 	int ncid2;		/* for scratch netCDF dataset */
 
+#ifdef TEST_PNETCDF
+        err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid2);
+#else
         err = nc_create(scratch, NC_NOCLOBBER, &ncid2);
+#endif
         IF (err) {
             error("nc_create: %s", nc_strerror(err));
 	} else {		/* add dim, var, gatt, check inq */
@@ -347,13 +388,17 @@
     err = nc_inq_natts(BAD_ID, &ngatts);
     IF (err != NC_EBADID)
 	error("bad ncid: status = %d", err);
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     err = nc_inq_natts(ncid, &ngatts);
     IF (err)
 	error("nc_inq_natts: %s", nc_strerror(err));
-    else IF (ngatts != NGATTS)
+    else IF (ngatts != numGatts)
 	error("nc_inq_natts: wrong number of global atts returned, %d", ngatts);
     err = nc_close(ncid);
     IF (err)
@@ -371,7 +416,11 @@
     err = nc_inq_ndims(BAD_ID, &ndims);
     IF (err != NC_EBADID)
 	error("bad ncid: status = %d", err);
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     err = nc_inq_ndims(ncid, &ndims);
@@ -395,13 +444,17 @@
     err = nc_inq_nvars(BAD_ID, &nvars);
     IF (err != NC_EBADID)
 	error("bad ncid: status = %d", err);
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     err = nc_inq_nvars(ncid, &nvars);
     IF (err)
 	error("nc_inq_nvars: %s", nc_strerror(err));
-    else IF (nvars != NVARS)
+    else IF (nvars != numVars)
 	error("nc_inq_nvars: wrong number returned, %d", nvars);
     err = nc_close(ncid);
     IF (err)
@@ -419,7 +472,11 @@
     err = nc_inq_unlimdim(BAD_ID, &unlimdim);
     IF (err != NC_EBADID)
 	error("bad ncid: status = %d", err);
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     err = nc_inq_unlimdim(ncid, &unlimdim);
@@ -441,7 +498,11 @@
     int i;
     int err;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     err = nc_inq_dimid(ncid, "noSuch", &dimid);
@@ -472,7 +533,11 @@
     char name[NC_MAX_NAME];
     size_t length;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     for (i = 0; i < NDIMS; i++) {
@@ -517,7 +582,11 @@
     int err;
     size_t length;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     for (i = 0; i < NDIMS; i++) {
@@ -547,7 +616,11 @@
     int err;
     char name[NC_MAX_NAME];
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
     for (i = 0; i < NDIMS; i++) {
@@ -577,7 +650,11 @@
     int i;
     int err;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
 
@@ -585,7 +662,7 @@
     IF (err != NC_ENOTVAR)
 	error("bad ncid: status = %d", err);
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	err = nc_inq_varid(BAD_ID, var_name[i], &varid);
         IF (err != NC_EBADID)
 	    error("bad ncid: status = %d", err);
@@ -614,10 +691,14 @@
     int dimids[MAX_RANK];
     int natts;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	err = nc_inq_var(BAD_ID, i, name, &datatype, &ndims, dimids, &natts);
         IF (err != NC_EBADID)
 	    error("bad ncid: status = %d", err);
@@ -680,10 +761,14 @@
     int err;
     int dimids[MAX_RANK];
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	err = nc_inq_vardimid(BAD_ID, i, dimids);
         IF (err != NC_EBADID)
 	    error("bad ncid: status = %d", err);
@@ -710,10 +795,14 @@
     int err;
     char name[NC_MAX_NAME];
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	err = nc_inq_varname(BAD_ID, i, name);
         IF (err != NC_EBADID)
 	    error("bad ncid: status = %d", err);
@@ -740,10 +829,14 @@
     int err;
     int natts;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	err = nc_inq_varnatts(BAD_ID, i, &natts);
         IF (err != NC_EBADID)
 	    error("bad ncid: status = %d", err);
@@ -770,10 +863,14 @@
     int err;
     int ndims;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	err = nc_inq_varndims(BAD_ID, i, &ndims);
         IF (err != NC_EBADID)
 	    error("bad ncid: status = %d", err);
@@ -800,10 +897,14 @@
     int err;
     nc_type datatype;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	err = nc_inq_vartype(BAD_ID, i, &datatype);
         IF (err != NC_EBADID)
 	    error("bad ncid: status = %d", err);
@@ -838,10 +939,14 @@
     double buf[1];		/* (void *) buffer */
     double value;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	for (j = 0; j < var_rank[i]; j++)
 	    index[j] = 0;
         err = nc_get_var1(BAD_ID, i, index, buf);
@@ -913,10 +1018,14 @@
     double expect;
     double got;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
         for (j = 0; j < var_rank[i]; j++) {
@@ -1040,10 +1149,14 @@
     double expect;
     double got;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
         for (j = 0; j < var_rank[i]; j++) {
@@ -1207,10 +1320,14 @@
     double expect;
     double got;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
 	error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
         for (j = 0; j < var_rank[i]; j++) {
@@ -1220,7 +1337,8 @@
         }
         if (var_rank[i] > 0) {
             j = var_rank[i] - 1;
-            imap[j] = nctypelen(var_type[i]);
+            // imap[j] = nctypelen(var_type[i]); /* in bytes */
+            imap[j] = 1; /* in numbers of elements */
             for (; j > 0; j--)
                 imap[j-1] = imap[j] * var_shape[i][j];
         }
@@ -1346,11 +1464,15 @@
     double got;
     int nok = 0;      /* count of valid comparisons */
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err) 
 	error("nc_open: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         for (j = 0; j < NATTS(i); j++) {
 	    err = nc_get_att(BAD_ID, i, ATT_NAME(i,j), buf);
 	    IF (err != NC_EBADID) 
@@ -1411,11 +1533,15 @@
     nc_type t;
     size_t n;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err) 
 	error("nc_open: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         for (j = 0; j < NATTS(i); j++) {
 	    err = nc_inq_att(BAD_ID, i, ATT_NAME(i,j), &t, &n);
 	    IF (err != NC_EBADID) 
@@ -1453,11 +1579,15 @@
     int err;
     size_t len;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	err = nc_inq_attlen(ncid, i, "noSuch", &len);
 	IF (err != NC_ENOTATT)
 	    error("Bad attribute name: status = %d", err);
@@ -1493,11 +1623,15 @@
     int err;
     nc_type datatype;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	err = nc_inq_atttype(ncid, i, "noSuch", &datatype);
 	IF (err != NC_ENOTATT)
 	    error("Bad attribute name: status = %d", err);
@@ -1533,11 +1667,15 @@
     int err;
     char name[NC_MAX_NAME];
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	err = nc_inq_attname(ncid, i, BAD_ATTNUM, name);
 	IF (err != NC_ENOTATT)
 	    error("Bad attribute number: status = %d", err);
@@ -1576,11 +1714,15 @@
     int err;
     int attnum;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	err = nc_inq_attid(ncid, i, "noSuch", &attnum);
 	IF (err != NC_ENOTATT)
 	    error("Bad attribute name: status = %d", err);
diff netcdf-c/nc_test/test_write.c cdf5/nc_test/test_write.c
--- netcdf-c/nc_test/test_write.c	2014-11-14 15:14:32.036534500 -0700
+++ cdf5/nc_test/test_write.c	2014-11-14 14:54:46.054781200 -0700
@@ -1,7 +1,7 @@
 /*********************************************************************
  *   Copyright 1996, UCAR/Unidata
  *   See netcdf/COPYRIGHT file for copying and redistribution conditions.
- *   $Id: test_write.c,v 1.33 2006/10/31 16:23:13 ed Exp $
+ *   $Id: test_write.c 2796 2014-10-28 03:40:29Z wkliao $
  *********************************************************************/
 
 #include "tests.h"
@@ -28,13 +28,22 @@
     int recdim;                 /* id of unlimited dimension */
 
     for (clobber = 0; clobber < 2; clobber++) {
-	err = nc_create(scratch, clobber ? NC_CLOBBER : NC_NOCLOBBER, &ncid);
+        int cmode = clobber ? NC_CLOBBER : NC_NOCLOBBER;
+#ifdef TEST_PNETCDF
+        err = nc_create_par(scratch, cmode|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
+	err = nc_create(scratch, cmode, &ncid);
+#endif
 	IF (err)
 	    error("nc_create: %s", nc_strerror(err));
 	err = nc_close(ncid);
 	IF (err)
 	    error("nc_close: %s", nc_strerror(err));
+#ifdef TEST_PNETCDF
+        err = nc_open_par(scratch, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
 	err = nc_open(scratch, NC_NOWRITE, &ncid);
+#endif
 	IF (err)
 	    error("nc_open: %s", nc_strerror(err));
 	err = nc_inq(ncid, &ndims, &nvars, &ngatts, &recdim);
@@ -53,7 +62,11 @@
 	    error("nc_close: %s", nc_strerror(err));
     }
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err != NC_EEXIST)
 	error("attempt to overwrite file: status = %d", err);
     err = remove(scratch);
@@ -106,7 +119,11 @@
 	error("bad ncid: status = %d", err);
 
 	/* read-only tests */
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
     err = nc_redef(ncid);
@@ -120,7 +137,11 @@
 	error("nc_close: %s", nc_strerror(err));
 
 	/* tests using scratch file */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc__create(scratch, NC_NOCLOBBER, 0, &sizehint, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -195,7 +216,11 @@
     /* check scratch file written as expected */
     check_file(scratch);  /* checks all except "abc" stuff added above */
 
+#ifdef TEST_PNETCDF
+    IF ((err = nc_open_par(scratch, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)))
+#else
     IF ((err = nc_open(scratch, NC_NOWRITE, &ncid)))
+#endif
         error("nc_open: %s", nc_strerror(err));
     IF ((err = nc_inq_dim(ncid, dimid, name, &length))) 
 	error("nc_inq_dim: %s", nc_strerror(err));
@@ -211,7 +236,11 @@
         error("nc_close: %s", nc_strerror(err));
 
     /* open scratch file for writing, add another dim, var, att, then check */
+#ifdef TEST_PNETCDF
+    IF ((err = nc_open_par(scratch, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)))
+#else
     IF ((err = nc_open(scratch, NC_WRITE, &ncid)))
+#endif
         error("nc_open: %s", nc_strerror(err));
     IF ((err = nc_redef(ncid)))
         error("nc_redef: %s", nc_strerror(err));
@@ -234,7 +263,11 @@
     /* check scratch file written as expected */
     check_file(scratch);
 
+#ifdef TEST_PNETCDF
+        err = nc_open_par(scratch, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(scratch, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
     err = nc_inq_dim(ncid, dimid, name, &length);
@@ -294,7 +327,11 @@
         error("bad ncid: status = %d", err);
 
         /* create scratch file & try nc_sync in define mode */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncidw);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncidw);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
 	return;
@@ -316,7 +353,11 @@
         error("nc_sync of ncidw failed: %s", nc_strerror(err));
 
         /* open another handle, nc_sync, read (check) */
+#ifdef TEST_PNETCDF
+        err = nc_open_par(scratch, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncidr);
+#else
     err = nc_open(scratch, NC_NOWRITE, &ncidr);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
     err = nc_sync(ncidr);
@@ -362,7 +403,11 @@
         error("bad ncid: status = %d", err);
 
         /* create scratch file & try nc_abort in define mode */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -386,7 +431,11 @@
 	 * define new dims, vars, atts
 	 * try nc_abort: should restore previous state (no dims, vars, atts)
 	 */ 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -406,7 +455,11 @@
     err = nc_close(ncid);	/* should already be closed */
     IF (err != NC_EBADID)
         error("bad ncid: status = %d", err);
+#ifdef TEST_PNETCDF
+        err = nc_open_par(scratch, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(scratch, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
     err = nc_inq (ncid, &ndims, &nvars, &ngatts, NULL);
@@ -423,7 +476,11 @@
         error("nc_close: %s", nc_strerror(err));
 
         /* try nc_abort in data mode - should just close */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -473,7 +530,11 @@
         error("bad ncid: status = %d", err);
 
         /* data mode test */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -567,7 +628,11 @@
         error("bad ncid: status = %d", err);
 
         /* main tests */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -629,7 +694,11 @@
         error("bad ncid: status = %d", err);
 
         /* scalar tests */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -672,13 +741,17 @@
         error("remove of %s failed", scratch);
 
         /* general tests using global vars */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
     }
     def_dims(ncid);
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         err = nc_def_var(ncid, var_name[i], var_type[i], var_rank[i],
             var_dimid[i], &varid);
         IF (err) 
@@ -716,7 +789,11 @@
     double value;
     double buf[1];		/* (void *) buffer */
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -727,7 +804,7 @@
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         for (j = 0; j < var_rank[i]; j++)
             index[j] = 0;
         err = nc_put_var1(BAD_ID, i, index, buf);
@@ -801,7 +878,11 @@
     char *p;			/* (void *) pointer */
     double value;
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -812,7 +893,7 @@
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
         for (j = 0; j < var_rank[i]; j++) {
@@ -928,7 +1009,11 @@
     char *p;			/* (void *) pointer */
     double value;
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -939,7 +1024,7 @@
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
         for (j = 0; j < var_rank[i]; j++) {
@@ -1083,7 +1168,11 @@
     char *p;			/* (void *) pointer */
     double value;
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1094,7 +1183,7 @@
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         assert(var_rank[i] <= MAX_RANK);
         assert(var_nels[i] <= MAX_NELS);
         for (j = 0; j < var_rank[i]; j++) {
@@ -1104,7 +1193,8 @@
         }
 	if (var_rank[i] > 0) {
 	    j = var_rank[i] - 1; 
-	    imap[j] = nctypelen(var_type[i]);
+            // imap[j] = nctypelen(var_type[i]); /* in bytes */
+            imap[j] = 1; /* in numbers of elements */
 	    for (; j > 0; j--)
 		imap[j-1] = imap[j] * var_shape[i][j];
 	}
@@ -1228,7 +1318,11 @@
     int i;
     char name[NC_MAX_NAME];
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1240,11 +1334,11 @@
     def_vars(ncid);
 
 	/* Prefix "new_" to each name */
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         err = nc_rename_var(BAD_ID, i, "newName");
         IF (err != NC_EBADID)
             error("bad ncid: status = %d", err);
-        err = nc_rename_var(ncid, i, var_name[NVARS-1]);
+        err = nc_rename_var(ncid, i, var_name[numVars-1]);
         IF (err != NC_ENAMEINUSE)
             error("duplicate name: status = %d", err);
 	(void) strcpy(name, "new_");
@@ -1264,7 +1358,7 @@
     err = nc_enddef(ncid);
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	(void) strcpy(name, "even_longer_");
 	(void) strcat(name, var_name[i]);
         err = nc_rename_var(ncid, i, name);
@@ -1309,7 +1403,11 @@
     size_t length;		/* of att */
     double value;
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1317,7 +1415,7 @@
     def_dims(ncid);
     def_vars(ncid);
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	varid = VARID(i);
         for (j = 0; j < NATTS(i); j++) {
 	    name = ATT_NAME(i,j);
@@ -1389,10 +1487,18 @@
     size_t length;              /* of att */
     char  value;
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid_in);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid_in);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid_out);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid_out);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1400,7 +1506,7 @@
     def_dims(ncid_out);
     def_vars(ncid_out);
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         varid = VARID(i);
         for (j = 0; j < NATTS(i); j++) {
             name = ATT_NAME(i,j);
@@ -1436,7 +1542,11 @@
     err = nc_close(ncid_out);
     IF (err)
         error("nc_close: %s", nc_strerror(err));
+#ifdef TEST_PNETCDF
+    err = nc_open_par(scratch, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid_out);
+#else
     err = nc_open(scratch, NC_WRITE, &ncid_out);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
     check_atts(ncid_out);
@@ -1463,7 +1573,7 @@
     err = nc_enddef(ncid_out);
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	if (NATTS(i) > 0 && ATT_LEN(i,j) > 0) {
 	    err = nc_rename_att(ncid_out, i, att_name[i][0], "a");
 	    IF (err)
@@ -1478,10 +1588,14 @@
         error("nc_close: %s", nc_strerror(err));
 
 	/* Reopen & check */
+#ifdef TEST_PNETCDF
+    err = nc_open_par(scratch, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid_out);
+#else
     err = nc_open(scratch, NC_WRITE, &ncid_out);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	if (NATTS(i) > 0 && ATT_LEN(i,j) > 0) {
 	    err = nc_inq_att(ncid_out, i, "a", &datatype, &length);
 	    IF (err)
@@ -1539,7 +1653,11 @@
     double value[MAX_NELS];
     double expect;
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1551,7 +1669,7 @@
     def_vars(ncid);
     put_atts(ncid);
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         varid = VARID(i);
         for (j = 0; j < NATTS(i); j++) {
 	    attname = ATT_NAME(i,j);
@@ -1578,11 +1696,15 @@
     err = nc_close(ncid);
     IF (err)
         error("nc_close: %s", nc_strerror(err));
+#ifdef TEST_PNETCDF
+    err = nc_open_par(scratch, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(scratch, NC_WRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         varid = VARID(i);
         for (j = 0; j < NATTS(i); j++) {
 	    attname = ATT_NAME(i,j);
@@ -1636,7 +1758,7 @@
 	/* Now in data mode */
 	/* Try making names even longer. Then restore original names */
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
         varid = VARID(i);
         for (j = 0; j < NATTS(i); j++) {
 	    attname = ATT_NAME(i,j);
@@ -1689,7 +1811,11 @@
     int varid;
     char *name;                 /* of att */
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1701,7 +1827,7 @@
     def_vars(ncid);
     put_atts(ncid);
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	varid = VARID(i);
 	numatts = NATTS(i);
         for (j = 0; j < numatts; j++) {
@@ -1737,7 +1863,11 @@
     err = nc_close(ncid);
     IF (err)
         error("nc_close: %s", nc_strerror(err));
+#ifdef TEST_PNETCDF
+    err = nc_open_par(scratch, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(scratch, NC_WRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
     err = nc_inq_natts(ncid, &natts);
@@ -1745,7 +1875,7 @@
 	error("nc_inq_natts: %s", nc_strerror(err));
     IF (natts != 0)
 	error("natts: expected %d, got %d", 0, natts);
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	varid = VARID(i);
 	err = nc_inq_varnatts(ncid, varid, &natts);
 	IF (err)
@@ -1763,7 +1893,7 @@
     IF (err)
         error("nc_enddef: %s", nc_strerror(err));
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	varid = VARID(i);
 	numatts = NATTS(i);
         for (j = 0; j < numatts; j++) {
@@ -1814,7 +1944,11 @@
 	error("bad ncid: status = %d", err);
 
 	/* try in read-only mode */
+#ifdef TEST_PNETCDF
+    err = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(testfile, NC_NOWRITE, &ncid);
+#endif
     IF (err)
         error("nc_open: %s", nc_strerror(err));
     err = nc_set_fill(ncid, NC_NOFILL, &old_fillmode);
@@ -1825,7 +1959,11 @@
         error("nc_close: %s", nc_strerror(err));
 
 	/* create scratch */
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_NOCLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_NOCLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1873,7 +2011,7 @@
         error("nc_put_var1_text: %s", nc_strerror(err));
 
 	/* get all variables & check all values equal default fill */
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	switch (var_type[i]) {
 	    case NC_CHAR:   fill = NC_FILL_CHAR; break;
 	    case NC_BYTE:   fill = NC_FILL_BYTE; break;
@@ -1909,7 +2047,11 @@
     err = nc_close(ncid);
     IF (err)
         error("nc_close: %s", nc_strerror(err));
+#ifdef TEST_PNETCDF
+    err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(scratch, NC_CLOBBER, &ncid);
+#endif
     IF (err) {
         error("nc_create: %s", nc_strerror(err));
         return;
@@ -1919,7 +2061,7 @@
 
 	/* set _FillValue = 42 for all vars */
     text = fill = 42;
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	if (var_type[i] == NC_CHAR) {
 	    err = nc_put_att_text(ncid, i, "_FillValue", 1, &text);
 	    IF (err)
@@ -1941,7 +2083,7 @@
         error("nc_put_var1_text: %s", nc_strerror(err));
 
 	/* get all variables & check all values equal 42 */
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	for (j = 0; j < var_nels[i]; j++) {
             err = toMixedBase(j, var_rank[i], var_shape[i], index);
             IF (err)
@@ -1973,7 +2115,8 @@
 }
 
 /* This function gets the version of a netCDF file, 1 is for netCDF
-   classic, 2 for 64-bit offset format, (someday) 3 for HDF5 format.
+   classic, 2 for 64-bit offset format, (someday) 3 for HDF5 format,
+   5 for 64-bit data format (CDF-5).
 */
 #define MAGIC_NUM_LEN 4
 static
@@ -1997,7 +2140,8 @@
    if (strncmp(magic, "CDF", MAGIC_NUM_LEN-1)==0)
    {
       if (magic[MAGIC_NUM_LEN-1] == NC_FORMAT_CLASSIC || 
-	  magic[MAGIC_NUM_LEN-1] == NC_FORMAT_64BIT)
+	  magic[MAGIC_NUM_LEN-1] == NC_FORMAT_CDF2 ||
+	  magic[MAGIC_NUM_LEN-1] == NC_FORMAT_CDF5)
 	 *version = magic[MAGIC_NUM_LEN-1];
       else
 	 return NC_ENOTNC;
@@ -2033,16 +2177,22 @@
 	error("bad default format: status = %d", err);
 
     /* NULL old_formatp */
-    err = nc_set_default_format(NC_FORMAT_64BIT, NULL);
+    err = nc_set_default_format(NC_FORMAT_CDF2, NULL);
     IF (err)
 	error("null old_fortmatp: status = %d", err);
 
     /* Cycle through available formats. */
-    for(i=1; i<3; i++)
+    for(i=1; i<5; i++)
     {
+       if (i == 3 || i == 4) continue; /* test classic formats only */
+
        if ((err = nc_set_default_format(i, NULL)))
 	  error("setting classic format: status = %d", err);
+#ifdef TEST_PNETCDF
+       if ((err = nc_create_par(scratch, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)))
+#else
        if ((err=nc_create(scratch, NC_CLOBBER, &ncid)))
+#endif
 	  error("bad nc_create: status = %d", err);
        if ((err=nc_put_att_text(ncid, NC_GLOBAL, "testatt", 
 				sizeof("blah"), "blah")))
@@ -2050,9 +2200,16 @@
        if ((err=nc_close(ncid)))
 	  error("bad close: status = %d", err);
        if ((err = nc_get_file_version(scratch, &version)))
-	  error("bad file version = %d", err);
-       if (version != i)
-	  error("bad file version = %d", err);
+	  error("bad file version = %d", version);
+       if (version != i) {
+          if (i == 4) {
+              if (version == 3) continue;
+	      printf("expect version 3 but got %d (file=%s)",version,scratch);
+              continue;
+          }
+	  printf("expect version %d but got %d (file=%s)",i,version,scratch);
+	  error("bad file version = %d", version);
+	}
     }
 
     /* Remove the left-over file. */
diff netcdf-c/nc_test/tests.h cdf5/nc_test/tests.h
--- netcdf-c/nc_test/tests.h	2014-11-14 15:14:32.036534500 -0700
+++ cdf5/nc_test/tests.h	2014-11-14 14:54:46.055757700 -0700
@@ -1,7 +1,7 @@
 /*********************************************************************
  *   Copyright 1996, UCAR/Unidata
  *   See netcdf/COPYRIGHT file for copying and redistribution conditions.
- *   $Id: tests.h,v 1.39 2008/09/21 13:11:23 ed Exp $
+ *   $Id: tests.h 2785 2014-10-26 05:21:20Z wkliao $
  *********************************************************************/
 
 #include <config.h>
@@ -13,7 +13,9 @@
 #include <float.h>
 #define NO_NETCDF_2 1
 #include "netcdf.h"
+#include "netcdf_par.h"
 #include "error.h"
+#include <mpi.h>
 
 #if defined(_CRAY) && !defined(_CRAYIEEE) && !defined(__crayx1)
 #define CRAYFLOAT 1 /* CRAY Floating point */
@@ -51,6 +53,40 @@
 #endif
 #define X_DOUBLE_MIN	(-X_DOUBLE_MAX)
 
+#define X_SCHAR_MAX     X_CHAR_MAX
+#define X_SCHAR_MIN     X_CHAR_MIN
+#define X_UCHAR_MAX     UCHAR_MAX
+#define X_UCHAR_MIN     0
+#define X_UBYTE_MAX     X_UCHAR_MAX
+#define X_UBYTE_MIN     X_UCHAR_MIN
+#define X_USHORT_MAX    USHRT_MAX
+#define X_USHORT_MIN    0
+#define X_UINT_MAX      UINT_MAX
+#define X_UINT_MIN      0
+
+#ifndef LLONG_MAX
+#define LLONG_MAX  0x7fffffffffffffffLL
+#endif
+#ifndef LLONG_MIN
+#define LLONG_MIN (-0x7fffffffffffffffLL-1)
+#endif
+#ifndef ULLONG_MAX
+#define ULLONG_MAX  0xffffffffffffffffULL
+#endif
+
+#ifndef X_INT64_MAX
+#define X_INT64_MAX    LLONG_MAX
+#endif
+#ifndef X_INT64_MIN
+#define X_INT64_MIN    LLONG_MIN
+#endif
+#ifndef X_UINT64_MAX
+#define X_UINT64_MAX  ULLONG_MAX
+#endif
+#ifndef X_UINT64_MIN
+#define X_UINT64_MIN  ULLONG_MIN
+#endif
+
 
 #if _SX /* NEC SUPER UX */
 #if _INT64
@@ -86,9 +122,9 @@
 
     /* Parameters of test data */
 
-#define NTYPES 6
+#define NTYPES 11
 #define NDIMS 5
-#define NVARS 136
+#define NVARS 166
 #define NRECS 2
 #define NGATTS NTYPES
 #define RECDIM 0
@@ -97,6 +133,10 @@
 #define MAX_DIM_LEN 4
 #define MAX_NATTS 3
 
+extern int numGatts;  /* number of global attributes */
+extern int numVars;   /* number of variables */
+extern int numTypes;  /* number of netCDF data types to test */
+
 
     /* Limits of internal types */
 
@@ -108,6 +148,13 @@
 #define long_min LONG_MIN
 #define float_min (-FLT_MAX)
 #define double_min (-DBL_MAX)
+#define ushort_min 0
+#define uint_min 0
+#define ulong_min 0
+#define int64_min LLONG_MIN
+#define longlong_min int64_min
+#define uint64_min 0
+#define ulonglong_min uint64_min
 
 #define text_max CHAR_MAX
 #define uchar_max UCHAR_MAX
@@ -117,6 +164,13 @@
 #define long_max LONG_MAX
 #define float_max FLT_MAX
 #define double_max DBL_MAX
+#define ushort_max USHRT_MAX
+#define uint_max UINT_MAX
+#define ulong_max ULONG_MAX
+#define int64_max LLONG_MAX
+#define longlong_max int64_max
+#define uint64_max ULLONG_MAX
+#define ulonglong_max uint64_max
 
 
 
@@ -140,9 +194,29 @@
 
     /* Non-standard internal types */
 
+#ifdef HAVE_SYS_TYPES_H
+# include <sys/types.h>
+#endif
+
 typedef char text;
 typedef signed char schar;
 
+#ifndef HAVE_USHORT
+typedef unsigned short int  ushort;
+#endif
+
+#ifndef HAVE_UINT
+typedef unsigned       int  uint;
+#endif
+
+#ifndef HAVE_INT64
+typedef          long long  int64;
+#endif
+
+#ifndef HAVE_UINT64
+typedef unsigned long long  uint64;
+#endif
+
 
     /* Global variables - filenames */
 
@@ -179,7 +253,7 @@
     /* varid is -1 for NC_GLOBAL so can do global atts in same loop */
 
 #define VARID(varid)      (varid < 0 ? NC_GLOBAL : varid)
-#define NATTS(varid)      (varid < 0 ? NGATTS : var_natts[varid])
+#define NATTS(varid)      (varid < 0 ? numGatts : var_natts[varid])
 #define ATT_NAME(varid,j) (varid < 0 ? gatt_name[j] : att_name[varid][j])
 #define ATT_TYPE(varid,j) (varid < 0 ? gatt_type[j] : att_type[varid][j])
 #define ATT_LEN(varid,j)  (varid < 0 ? gatt_len[j] : att_len[varid][j])
@@ -218,6 +292,10 @@
 extern void test_nc_get_var_text(void);
 extern void test_nc_get_var_uchar(void);
 extern void test_nc_get_var(void);
+extern void test_nc_get_var_ushort(void);
+extern void test_nc_get_var_uint(void);
+extern void test_nc_get_var_longlong(void);
+extern void test_nc_get_var_ulonglong(void);
 
 extern void test_nc_get_var1_double(void);
 extern void test_nc_get_var1_float(void);
@@ -228,6 +306,10 @@
 extern void test_nc_get_var1_text(void);
 extern void test_nc_get_var1_uchar(void);
 extern void test_nc_get_var1(void);
+extern void test_nc_get_var1_ushort(void);
+extern void test_nc_get_var1_uint(void);
+extern void test_nc_get_var1_longlong(void);
+extern void test_nc_get_var1_ulonglong(void);
 
 extern void test_nc_get_vara_double(void);
 extern void test_nc_get_vara_float(void);
@@ -238,6 +320,10 @@
 extern void test_nc_get_vara_text(void);
 extern void test_nc_get_vara_uchar(void);
 extern void test_nc_get_vara(void);
+extern void test_nc_get_vara_ushort(void);
+extern void test_nc_get_vara_uint(void);
+extern void test_nc_get_vara_longlong(void);
+extern void test_nc_get_vara_ulonglong(void);
 
 extern void test_nc_get_vars(void);
 extern void test_nc_get_vars_double(void);
@@ -249,6 +335,10 @@
 extern void test_nc_get_vars_text(void);
 extern void test_nc_get_vars_uchar(void);
 extern void test_nc_get_vars(void);
+extern void test_nc_get_vars_ushort(void);
+extern void test_nc_get_vars_uint(void);
+extern void test_nc_get_vars_longlong(void);
+extern void test_nc_get_vars_ulonglong(void);
 
 extern void test_nc_get_varm(void);
 extern void test_nc_get_varm_double(void);
@@ -260,6 +350,10 @@
 extern void test_nc_get_varm_text(void);
 extern void test_nc_get_varm_uchar(void);
 extern void test_nc_get_varm(void);
+extern void test_nc_get_varm_ushort(void);
+extern void test_nc_get_varm_uint(void);
+extern void test_nc_get_varm_longlong(void);
+extern void test_nc_get_varm_ulonglong(void);
 
 extern void test_nc_get_att(void);
 extern void test_nc_get_att_double(void);
@@ -270,6 +364,10 @@
 extern void test_nc_get_att_short(void);
 extern void test_nc_get_att_text(void);
 extern void test_nc_get_att_uchar(void);
+extern void test_nc_get_att_ushort(void);
+extern void test_nc_get_att_uint(void);
+extern void test_nc_get_att_longlong(void);
+extern void test_nc_get_att_ulonglong(void);
 
 extern void test_nc_put_att(void);
 extern void test_nc_put_var_double(void);
@@ -281,6 +379,10 @@
 extern void test_nc_put_var_text(void);
 extern void test_nc_put_var_uchar(void);
 extern void test_nc_put_var(void);
+extern void test_nc_put_var_ushort(void);
+extern void test_nc_put_var_uint(void);
+extern void test_nc_put_var_longlong(void);
+extern void test_nc_put_var_ulonglong(void);
 
 extern void test_nc_put_var1_double(void);
 extern void test_nc_put_var1_float(void);
@@ -291,6 +393,10 @@
 extern void test_nc_put_var1_text(void);
 extern void test_nc_put_var1_uchar(void);
 extern void test_nc_put_var1(void);
+extern void test_nc_put_var1_ushort(void);
+extern void test_nc_put_var1_uint(void);
+extern void test_nc_put_var1_longlong(void);
+extern void test_nc_put_var1_ulonglong(void);
 
 extern void test_nc_put_vara_double(void);
 extern void test_nc_put_vara_float(void);
@@ -301,6 +407,10 @@
 extern void test_nc_put_vara_text(void);
 extern void test_nc_put_vara_uchar(void);
 extern void test_nc_put_vara(void);
+extern void test_nc_put_vara_ushort(void);
+extern void test_nc_put_vara_uint(void);
+extern void test_nc_put_vara_longlong(void);
+extern void test_nc_put_vara_ulonglong(void);
 
 extern void test_nc_put_vars_double(void);
 extern void test_nc_put_vars_float(void);
@@ -311,6 +421,10 @@
 extern void test_nc_put_vars_text(void);
 extern void test_nc_put_vars_uchar(void);
 extern void test_nc_put_vars(void);
+extern void test_nc_put_vars_ushort(void);
+extern void test_nc_put_vars_uint(void);
+extern void test_nc_put_vars_longlong(void);
+extern void test_nc_put_vars_ulonglong(void);
 
 extern void test_nc_put_varm_double(void);
 extern void test_nc_put_varm_float(void);
@@ -321,6 +435,10 @@
 extern void test_nc_put_varm_text(void);
 extern void test_nc_put_varm_uchar(void);
 extern void test_nc_put_varm(void);
+extern void test_nc_put_varm_ushort(void);
+extern void test_nc_put_varm_uint(void);
+extern void test_nc_put_varm_longlong(void);
+extern void test_nc_put_varm_ulonglong(void);
 
 extern void test_nc_put_att_double(void);
 extern void test_nc_put_att_float(void);
@@ -330,6 +448,10 @@
 extern void test_nc_put_att_short(void);
 extern void test_nc_put_att_text(void);
 extern void test_nc_put_att_uchar(void);
+extern void test_nc_put_att_ushort(void);
+extern void test_nc_put_att_uint(void);
+extern void test_nc_put_att_longlong(void);
+extern void test_nc_put_att_ulonglong(void);
 
 extern void test_nc_create(void);
 extern void test_nc_redef(void);
@@ -370,7 +492,13 @@
 	NCT_INT =	20,	/* int */
 	NCT_LONG =	22,	/* long */
 	NCT_FLOAT =	36,	/* float */
-	NCT_DOUBLE =	40	/* double */
+	NCT_DOUBLE =	40,	/* double */
+        NCT_USHORT =    41,
+        NCT_UINT =      42,
+        NCT_INT64 =     43,
+#define NCT_LONGLONG NCT_INT64
+        NCT_UINT64 =    44
+#define NCT_ULONGLONG NCT_UINT64
 } nct_itype;
 
 int inRange3(const double value, const nc_type datatype, const nct_itype itype);
diff netcdf-c/nc_test/tst_atts.c cdf5/nc_test/tst_atts.c
--- netcdf-c/nc_test/tst_atts.c	2014-11-14 15:14:32.036534500 -0700
+++ cdf5/nc_test/tst_atts.c	2014-11-14 14:54:46.056734200 -0700
@@ -6,7 +6,7 @@
    Unicode names encoded with UTF-8. It is the NETCDF3 equivalent
    of tst_unicode.c
 
-   $Id$
+   $Id: tst_atts.c 2792 2014-10-27 06:02:59Z wkliao $
 */
 
 #include <nc_tests.h>
@@ -454,7 +454,11 @@
     int i444_dims[RANK_i444];
 
     /* enter define mode */
+#ifdef TEST_PNETCDF
+    stat = nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     stat = nc_create(FILE_NAME, NC_CLOBBER, &ncid);
+#endif
     check_err(stat,__LINE__,__FILE__);
 
     /* define dimensions */
@@ -2342,6 +2346,9 @@
 int
 main(int argc, char **argv)
 {
+#ifdef TEST_PNETCDF
+   MPI_Init(&argc, &argv);
+#endif
    printf("\n*** Testing netCDF attributes.\n");
    printf("*** testing attribute renaming for memory leak, like nc_test...");
    {
@@ -2354,7 +2361,11 @@
       char char_data = 'a';
 
       /* Create a file with a var with two atts. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_NETCDF4|NC_CLASSIC_MODEL|NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_def_var(ncid, VAR_NAME, NC_INT, 0, NULL, &varid)) ERR;
       if (nc_put_att(ncid, varid, A1_NAME, NC_CHAR, 1, &char_data)) ERR;
       if (nc_put_att(ncid, varid, B1_NAME, NC_CHAR, 1, &char_data)) ERR;
@@ -2390,7 +2401,11 @@
       if (nc_close(ncid)) ERR;
 
       /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_inq_nvars(ncid, &nvars)) ERR;
       if (nvars != 1) ERR_RET;
       for (v = 0; v < nvars; v++)
@@ -2418,7 +2433,11 @@
       if (create_file()) ERR;
 
       /* Open the file. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_redef(ncid)) ERR;
 
       /* Add a global attribute A_NAME. */
@@ -2443,7 +2462,11 @@
       if (nc_close(ncid)) ERR;
 
       /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_inq_nvars(ncid, &nvars)) ERR;
       if (nvars != NVARS) ERR_RET;
       for (v = 0; v < nvars; v++)
@@ -2459,5 +2482,8 @@
 
    }
    SUMMARIZE_ERR;
+#ifdef TEST_PNETCDF
+   MPI_Finalize();
+#endif
    FINAL_RESULTS;
 }
diff netcdf-c/nc_test/tst_atts3.c cdf5/nc_test/tst_atts3.c
--- netcdf-c/nc_test/tst_atts3.c	2014-11-14 15:14:32.036534500 -0700
+++ cdf5/nc_test/tst_atts3.c	2014-11-14 14:54:46.057710700 -0700
@@ -4,11 +4,12 @@
 
    Test attributes. 
 
-   $Id: tst_atts1.c 2190 2012-05-21 11:20:44Z russ $
+   $Id: tst_atts3.c 2796 2014-10-28 03:40:29Z wkliao $
 */
 
 #include <nc_tests.h>
 #include "netcdf.h"
+#include "netcdf_par.h"
 #include <signal.h>
 
 #define FILE_NAME "tst_atts_3.nc"
@@ -93,7 +94,11 @@
    int j;
 
    /* Create a file with some global atts. */
+#ifdef TEST_PNETCDF
+   if (nc_create_par(FILE_NAME, cmode|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
    if (nc_create(FILE_NAME, cmode, &ncid)) ERR;
+#endif
    if (nc_put_att_text(ncid, NC_GLOBAL, name[0], len[0], NULL)) ERR;      
    if (nc_put_att_schar(ncid, NC_GLOBAL, name[1], NC_BYTE, len[1], b)) ERR;      
    if (nc_put_att_short(ncid, NC_GLOBAL, name[2], NC_SHORT, len[2], s)) ERR;      
@@ -105,7 +110,11 @@
    if (nc_close(ncid)) ERR;
       
    /* Reopen the file and check the order. */
+#ifdef TEST_PNETCDF
+   if (nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_open(FILE_NAME, 0, &ncid)) ERR;
+#endif
    for (j = 0; j < NUM_ATTS; j++)
    {
       if (nc_inq_attname(ncid, NC_GLOBAL, j, name_in)) ERR;
@@ -136,6 +145,9 @@
     unsigned long long ulonglong_out[ATT_LEN] = {0LL, 128LL, 3123456789LL};
 #endif
 
+#ifdef TEST_PNETCDF
+   MPI_Init(&argc, &argv);
+#endif
     (void) signal(SIGFPE, SIG_IGN);
 
    printf("\n*** Testing netcdf-3 attribute functions.\n");
@@ -149,13 +161,21 @@
       int j;
 
       /* Create a file with some global atts. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       for (j = 0; j < NUM_SIMPLE_ATTS; j++)
 	 if (nc_put_att_int(ncid, NC_GLOBAL, name[j], NC_INT, 0, NULL)) ERR;      
       if (nc_close(ncid)) ERR;
       
       /* Reopen the file and check the order. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, 0, &ncid)) ERR;
+#endif
       for (j = 0; j < NUM_SIMPLE_ATTS; j++)
       {
 	 if (nc_inq_attname(ncid, NC_GLOBAL, j, name_in)) ERR;
@@ -176,7 +196,11 @@
       char *speech_in;
 
       /* This won't work, because classic files can't create these types. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_put_att_int(ncid, NC_GLOBAL, ATT_INT_NAME, NC_INT, ATT_LEN, 
 			    int_out)) ERR;      
       /* It is also OK to read classic types converted into
@@ -193,7 +217,11 @@
       if (nc_close(ncid)) ERR;
 
       /* Create a file with a global attribute of each type. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_put_att_text(ncid, NC_GLOBAL, ATT_TEXT_NAME, strlen(speech)+1, speech)) ERR;      
       if (nc_put_att_schar(ncid, NC_GLOBAL, ATT_SCHAR_NAME, NC_BYTE, ATT_LEN, schar_out)) ERR;      
       if (nc_put_att_short(ncid, NC_GLOBAL, ATT_SHORT_NAME, NC_SHORT, ATT_LEN, short_out)) ERR;      
@@ -203,7 +231,11 @@
       if (nc_close(ncid)) ERR;
 
       /* Open the file and check attributes. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, 0, &ncid)) ERR;
+#endif
       /* Check text. */
       if (nc_inq_att(ncid, NC_GLOBAL, ATT_TEXT_NAME, &att_type, &att_len))
 	 ERR;
@@ -238,7 +270,11 @@
       int i;
 
       /* Reopen the file and try different type conversions. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, 0, &ncid)) ERR;
+#endif
 
       /* No text conversions are allowed, and people who try them should
        * be locked up, away from decent folk! */
@@ -379,7 +415,11 @@
       /*int int_in[ATT_LEN], int_out[ATT_LEN] = {NC_MIN_INT, 128, NC_MAX_INT};*/
 
       /* Create a file with a global attribute of each type of zero length. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_put_att_text(ncid, NC_GLOBAL, ATT_TEXT_NAME, 0, NULL)) ERR;
       if (nc_put_att_schar(ncid, NC_GLOBAL, ATT_SCHAR_NAME, NC_BYTE, 0, NULL)) ERR;
       if (nc_put_att_short(ncid, NC_GLOBAL, ATT_SHORT_NAME, NC_SHORT, 0, NULL)) ERR;
@@ -401,7 +441,11 @@
       size_t len;
       nc_type xtype;
 
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, 0, &ncid)) ERR;
+#endif
       if (nc_get_att_text(ncid, NC_GLOBAL, ATT_TEXT_NAME, NULL)) ERR;
       if (nc_inq_att(ncid, NC_GLOBAL, ATT_TEXT_NAME, &xtype, &len)) ERR;
       if (len || xtype != NC_CHAR) ERR;
@@ -440,7 +484,11 @@
 
 
       /* Create a file with a global attribute of each type of zero length. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_enddef(ncid)) ERR;
       if (nc_redef(ncid)) ERR;
       if (nc_put_att_text(ncid, NC_GLOBAL, ATT_TEXT_NAME, 0, NULL)) ERR;
@@ -453,7 +501,11 @@
 
       /* Make sure we can read all these zero-length atts added during a
        * redef. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, 0, &ncid)) ERR;
+#endif
       if (nc_get_att_text(ncid, NC_GLOBAL, ATT_TEXT_NAME, NULL)) ERR;
       if (nc_get_att_schar(ncid, NC_GLOBAL, ATT_SCHAR_NAME, schar_in)) ERR;
       if (nc_get_att_short(ncid, NC_GLOBAL, ATT_SHORT_NAME, short_in)) ERR;
@@ -480,13 +532,21 @@
       int int_out[ATT_LEN] = {-100000, 128, 100000};
 
       /* Create a file with a global attribute. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_put_att_text(ncid, NC_GLOBAL, ATT_TEXT_NAME, strlen(speech)+1, 
 			  speech)) ERR;      
       if (nc_close(ncid)) ERR;
       
       /* Rename it. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_inq_attid(ncid, NC_GLOBAL, ATT_TEXT_NAME, &attid_in)) ERR;
       if (attid_in != 0) ERR;
       if (nc_inq_attname(ncid, NC_GLOBAL, attid_in, name_in)) ERR;
@@ -497,7 +557,11 @@
       if (strcmp(name_in, ATT_TEXT_NAME2)) ERR;
       if (nc_close(ncid)) ERR;
 
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_inq_att(ncid, NC_GLOBAL, ATT_TEXT_NAME2, &att_type, &att_len)) ERR;
       if (att_type != NC_CHAR || att_len != strlen(speech) + 1) ERR;
       if (!(speech_in = malloc(att_len + 1))) ERR;
@@ -508,13 +572,21 @@
       if (nc_close(ncid)) ERR;
 
       /* Now delete the att. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_redef(ncid)) ERR;
       if (nc_del_att(ncid, NC_GLOBAL, ATT_TEXT_NAME2)) ERR;
       if (nc_close(ncid)) ERR;
 
       /* Now create a file with a variable, which has an att. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_put_att_text(ncid, NC_GLOBAL, ATT_TEXT_NAME, strlen(speech)+1, speech)) ERR;      
       if (nc_def_dim(ncid, DIM1_NAME, DIM1_LEN, &dimids[0])) ERR;
       if (nc_def_dim(ncid, DIM2_NAME, DIM2_LEN, &dimids[1])) ERR;
@@ -523,14 +595,22 @@
       if (nc_close(ncid)) ERR;
       
       /* Reopen the file and delete it. Make sure it's gone. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_redef(ncid)) ERR;
       if (nc_del_att(ncid, 0, ATT_INT_NAME)) ERR;
       if (nc_close(ncid)) ERR;
 
       /* Reopen the file and readd the attribute. Enddef and redef,
        * and delete it, then check to make sure it's gone. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_redef(ncid)) ERR;
       if (nc_put_att_int(ncid, varid, ATT_INT_NAME, NC_INT, 3, int_out)) ERR;      
       if (nc_enddef(ncid)) ERR;
@@ -552,13 +632,21 @@
       const int number = 42;
 
       /* Create a file with several global attributes. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_put_att_int(ncid, NC_GLOBAL, ATT0, NC_INT, 1, &number)) ERR;
       if (nc_put_att_int(ncid, NC_GLOBAL, ATT1, NC_INT, 1, &number)) ERR;
       if (nc_close(ncid)) ERR;
       
       /* Open it and check the order. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_inq_attid(ncid, NC_GLOBAL, ATT0, &attid_in)) ERR;
       if (attid_in != 0) ERR;
       if (nc_inq_attid(ncid, NC_GLOBAL, ATT1, &attid_in)) ERR;
@@ -566,7 +654,11 @@
       if (nc_close(ncid)) ERR;
 
       /* Now create a file with a variable, which has two atts. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_def_dim(ncid, DIM1_NAME, DIM1_LEN, &dimids[0])) ERR;
       if (nc_def_dim(ncid, DIM2_NAME, DIM2_LEN, &dimids[1])) ERR;
       if (nc_def_var(ncid, VAR1_NAME, NC_INT, 2, dimids, &varid)) ERR;
@@ -575,7 +667,11 @@
       if (nc_close(ncid)) ERR;
       
       /* Reopen the file and check the order of the attributes on the var. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, NC_WRITE, &ncid)) ERR;
+#endif
       if (nc_inq_attid(ncid, 0, ATT0, &attid_in)) ERR;
       if (attid_in != 0) ERR;
       if (nc_inq_attid(ncid, 0, ATT1, &attid_in)) ERR;
@@ -600,7 +696,11 @@
       char name_in[NC_MAX_NAME + 1];
 
       /* Create a file with one var, and attach three atts to it. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_def_var(ncid, VAR_NAME, NC_INT, 0, NULL, &varid)) ERR;
       if (nc_put_att_double(ncid, varid, A1_NAME, NC_INT, A1_LEN, dvalue)) ERR;      
       if (nc_put_att_double(ncid, varid, A2_NAME, NC_INT, A2_LEN, dvalue)) ERR;      
@@ -608,7 +708,11 @@
       if (nc_close(ncid)) ERR;
       
       /* Reopen the file and check. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, 0, &ncid)) ERR;
+#endif
       if (nc_inq_nvars(ncid, &nvars)) ERR;
       if (nvars != 1) ERR;
       if (nc_inq_varnatts(ncid, 0, &natts)) ERR;
@@ -640,7 +744,11 @@
    {
       int ncid, att = 1;
 
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_enddef(ncid)) ERR;
       if (nc_redef(ncid)) ERR;
       if (nc_put_att(ncid, NC_GLOBAL, ATT_1, NC_INT, 1, &att)) ERR;
@@ -649,7 +757,11 @@
 
       if (nc_close(ncid)) ERR;
 
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME, 0, &ncid)) ERR;
+#endif
       if (nc_close(ncid)) ERR;
    }
 
@@ -669,7 +781,11 @@
       double double_in[ATT_LEN], double_out[ATT_LEN] = {0.25, .5, 0.125};
 
       /* Create a file with a global attribute of each type. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)) ERR;
+#else
       if (nc_create(FILE_NAME, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_put_att_text(ncid, NC_GLOBAL, ATT_TEXT_NAME, strlen(speech)+1, speech)) ERR;      
       if (nc_put_att_schar(ncid, NC_GLOBAL, ATT_SCHAR_NAME, NC_BYTE, ATT_LEN, schar_out)) ERR;      
       if (nc_put_att_short(ncid, NC_GLOBAL, ATT_SHORT_NAME, NC_SHORT, ATT_LEN, short_out)) ERR;      
@@ -678,7 +794,11 @@
       if (nc_put_att_double(ncid, NC_GLOBAL, ATT_DOUBLE_NAME, NC_DOUBLE, ATT_LEN, double_out)) ERR;      
 
       /* Create another file and copy all the attributes. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(FILE_NAME2, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid2)) ERR;
+#else
       if (nc_create(FILE_NAME2, NC_CLOBBER, &ncid2)) ERR;      
+#endif
       if (nc_copy_att(ncid, NC_GLOBAL, ATT_TEXT_NAME, ncid2, NC_GLOBAL)) ERR;
       if (nc_copy_att(ncid, NC_GLOBAL, ATT_SCHAR_NAME, ncid2, NC_GLOBAL)) ERR;
       if (nc_copy_att(ncid, NC_GLOBAL, ATT_SHORT_NAME, ncid2, NC_GLOBAL)) ERR;
@@ -691,7 +811,11 @@
       if (nc_close(ncid2)) ERR;
 
       /* Open the file and check attributes. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(FILE_NAME2, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(FILE_NAME2, 0, &ncid)) ERR;
+#endif
       /* Check text. */
       if (nc_inq_att(ncid, NC_GLOBAL, ATT_TEXT_NAME, &att_type, &att_len)) ERR;
       if (att_type != NC_CHAR || att_len != strlen(speech) + 1) ERR;
@@ -718,6 +842,9 @@
       if (nc_close(ncid)) ERR;
    }
    SUMMARIZE_ERR;
+#ifdef TEST_PNETCDF
+   MPI_Finalize();
+#endif
    FINAL_RESULTS;
 }
 
diff netcdf-c/nc_test/tst_meta.c cdf5/nc_test/tst_meta.c
--- netcdf-c/nc_test/tst_meta.c	2015-03-09 13:48:02.763960300 -0600
+++ cdf5/nc_test/tst_meta.c	2014-11-14 14:54:46.058687200 -0700
@@ -9,6 +9,7 @@
 
 */
 
+#include <stdio.h> /* printf() */
 #include <config.h>
 #include <netcdf.h>
 #include <netcdf_meta.h>
diff netcdf-c/nc_test/tst_misc.c cdf5/nc_test/tst_misc.c
--- netcdf-c/nc_test/tst_misc.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test/tst_misc.c	2014-11-14 14:54:46.059663700 -0700
@@ -14,12 +14,16 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <netcdf.h>
+#include <netcdf_par.h>
 
 #define FILE_NAME "tst_misc.nc"
 
 int
 main(int argc, char **argv) 
 {
+#ifdef TEST_PNETCDF
+   MPI_Init(&argc, &argv);
+#endif
    printf("\n*** Testing some extra stuff.\n");
    printf("*** Trying to open non-netCDF files of tiny length...");
    {
@@ -41,7 +45,11 @@
 	 if (fclose(file)) ERR;
 	 
 	 /* Make sure that netCDF rejects this file politely. */
+#ifdef TEST_PNETCDF
+        openstat = nc_open_par(FILE_NAME, NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
 	 openstat = nc_open(FILE_NAME, 0, &ncid);
+#endif
 	 /* Some platforms (OSX, buddy) return stat = 2 (file not found)
 	    for index i == 2.  Not sure why, but this is a work around. */
 	 if(openstat != NC_ENOTNC && openstat != 2) ERR;
@@ -50,5 +58,8 @@
    }
 
    SUMMARIZE_ERR;
+#ifdef TEST_PNETCDF
+   MPI_Finalize();
+#endif
    FINAL_RESULTS;
 }
diff netcdf-c/nc_test/tst_names.c cdf5/nc_test/tst_names.c
--- netcdf-c/nc_test/tst_names.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test/tst_names.c	2014-11-14 14:54:46.060640200 -0700
@@ -6,13 +6,14 @@
    netCDF data objects, including names with "/" character, trailing spaces, 
    leading special characters, and invalid UTF-8 strings.
 
-   $Id: tst_names.c,v 1.9 2008/08/07 14:23:36 russ Exp $
+   $Id: tst_names.c 2792 2014-10-27 06:02:59Z wkliao $
 */
 #include <config.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
 #include <netcdf.h>
+#include <netcdf_par.h>
 #include <nc_tests.h>
 
 /* The data file we will create. */
@@ -20,6 +21,9 @@
 #define NDIMS 1
 #define DIMLEN 1
 
+#define ERROR {printf("Error at line %d: %s\n",__LINE__,nc_strerror(res)); continue;}
+#define ERRORI {printf("Error at line %d (loop=%d): %s\n",__LINE__,i,nc_strerror(res)); continue;}
+
 int
 main(int argc, char **argv)
 {
@@ -214,6 +218,8 @@
        NC_FORMAT_CLASSIC
        ,
        NC_FORMAT_64BIT
+       ,
+       NC_FORMAT_CDF5
 #ifdef USE_NETCDF4
        ,
        NC_FORMAT_NETCDF4
@@ -223,35 +229,44 @@
    };
    int num_formats = (sizeof formats) / (sizeof formats[0]);
    char *format_names[] = {
-       "classic", "64-bit offset", "netCDF-4/HDF5", "netCDF-4 classic model"
+       "classic", "64-bit offset", "64-bit data", "netCDF-4/HDF5", "netCDF-4 classic model"
    };
 
+#ifdef TEST_PNETCDF
+   MPI_Init(&argc, &argv);
+#endif
+
    printf("\n*** testing names with file %s...\n", testfile);
    for (j = 0; j < num_formats; j++)
    {
        printf("*** switching to netCDF %s format...", format_names[j]);
        nc_set_default_format(formats[j], NULL);
+#ifdef TEST_PNETCDF
+       if((res = nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)))
+#else
        if((res = nc_create(testfile, NC_CLOBBER, &ncid)))
-	   ERR;
+#endif
+	   ERROR
        
        /* Define dimensions, variables, and attributes with various
 	* acceptable names */
        for (i = 0; i < NUM_GOOD; i++) {
 	   if ((res = nc_def_dim(ncid, valid[i], DIMLEN, &dimid)))
-	       ERR;
+	       ERRORI
+
 	   dimids[i] = dimid;
 	   /* Define variable with same name */
 	   if ((res = nc_def_var(ncid, valid[i], NC_FLOAT, NDIMS, &dimids[i], 
 				 &varid)))
-	       ERR;
+	       ERRORI
 	   varids[i] = varid;
 	   /* Define variable and global attributes with same name and value */
 	   if ((res = nc_put_att_text(ncid, varid, valid[i], 
 				      strlen(valid[i]), valid[i])))
-	       ERR;
+	       ERRORI
 	   if ((res = nc_put_att_double(ncid, NC_GLOBAL, valid[i], NC_DOUBLE, 
 					NATTVALS, attvals)))
-	       ERR;
+	       ERRORI
 #if 0
 	   attnums[i] = i;
 #endif
@@ -261,47 +276,52 @@
 	* bad names and make sure these are rejected */
        for (i = 0; i < NUM_BAD; i++) {
 	   if ((res = nc_def_dim(ncid, notvalid[i], DIMLEN, &dimid)) 
-	       != NC_EBADNAME) ERR;
+	       != NC_EBADNAME) ERRORI
 	   if ((res = nc_def_var(ncid, notvalid[i], NC_FLOAT, NDIMS, dimids, 
 				 &varid))
-	       != NC_EBADNAME) ERR;
+	       != NC_EBADNAME) ERRORI
 	   if ((res = nc_put_att_text(ncid, varid, notvalid[i], 
 				      strlen(attstring), attstring))
-	       != NC_EBADNAME) ERR;
+	       != NC_EBADNAME) ERRORI
 	   if ((res = nc_put_att_double(ncid, NC_GLOBAL, notvalid[i], NC_DOUBLE, 
 					NATTVALS, attvals))
-	       != NC_EBADNAME) ERR;
+	       != NC_EBADNAME) ERRORI
        }
        if ((res = nc_enddef(ncid)))
-	   ERR;
+	   ERROR
        if ((res = nc_close(ncid)))
-	   ERR;
+	   ERROR
        
        /* Check it out, make sure all objects with good names were defined OK */
+#ifdef TEST_PNETCDF
+       if ((res = nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)))
+#else
        if ((res = nc_open(testfile, NC_NOWRITE, &ncid)))
-	   ERR;
+#endif
+	   ERROR
        for (i = 0; i < NUM_GOOD; i++) {
 	   size_t attlen;
 	   if ((res = nc_inq_dimid(ncid, valid[i], &dimid)) || 
 	       dimid != dimids[i])
-	       ERR;
+	       ERRORI
 	   if ((res = nc_inq_varid(ncid, valid[i], &varid)) || 
 	       varid != varids[i])
-	       ERR;
+	       ERRORI
 	   res = nc_inq_attlen(ncid, varid, valid[i], &attlen);
 	   if ((res = nc_get_att_text(ncid, varid, valid[i], attstr_in))) 
-	       ERR;
+	       ERRORI
 	   attstr_in[attlen] = '\0';
 	   if (strcmp(valid[i], attstr_in) != 0) 
-	       ERR;
+	       ERRORI
 	   if ((res = nc_get_att_double(ncid, NC_GLOBAL, valid[i], 
 					attvals_in)) 
 	       || attvals[0] != attvals_in[0]) 
-	       ERR;
+	       ERRORI
        }
        if ((res = nc_close(ncid)))
-	   ERR;
+	   ERROR
 /*        (void) remove(testfile); */
+
        SUMMARIZE_ERR;
    }
    FINAL_RESULTS;
@@ -306,5 +326,8 @@
    }
    FINAL_RESULTS;
 
+#ifdef TEST_PNETCDF
+   MPI_Finalize();
+#endif
    return 0;
 }
diff netcdf-c/nc_test/tst_nofill.c cdf5/nc_test/tst_nofill.c
--- netcdf-c/nc_test/tst_nofill.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test/tst_nofill.c	2014-11-14 14:54:46.066499200 -0700
@@ -9,7 +9,7 @@
   when invoked with the blksize argument between 2091953 and 2150032,
   inclusive, and succeeds for other blksizes.
 
-  $Id$
+  $Id: tst_nofill.c 2792 2014-10-27 06:02:59Z wkliao $
 */
 
 #include <config.h>
@@ -107,9 +107,14 @@
     * the same effect by providing the desired value as sizehint to
     * nc__create() instead of calling nc_create() and getting the
     * block size reported by fstat */
+#ifdef TEST_PNETCDF
+   stat = nc_create_par(file_name, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+   /* PnetCDF does not support fill mode */
+#else
    stat = nc__create(file_name, NC_CLOBBER, default_initialsize, sizehintp, &ncid);
    check_err(stat,__LINE__,__FILE__);
    stat = nc_set_fill(ncid, fill_mode, &old_fill_mode);
+#endif
    check_err(stat,__LINE__,__FILE__);
 
    /* define dimensions */
@@ -357,6 +362,9 @@
 				 * value between 2091953 and 2150032
 				 * triggers bug, whereas all other
 				 * values work fine. */
+#ifdef TEST_PNETCDF
+    MPI_Init(&argc, &argv);
+#endif
 
     if (argc > 1) {
 	char *endptr, *str = argv[1];
@@ -393,8 +401,13 @@
        printf("*** Compare values in nofill mode and fill mode files...");
        /* compare data in two files created with nofill mode and fill
 	* mode, which should be identical if all the data were written */
+#ifdef TEST_PNETCDF
+       if (nc_open_par(FILE_NAME1, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid1)) ERR;
+       if (nc_open_par(FILE_NAME2, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid2)) ERR;
+#else
        if (nc_open(FILE_NAME1, NC_NOWRITE, &ncid1)) ERR;
        if (nc_open(FILE_NAME2, NC_NOWRITE, &ncid2)) ERR;
+#endif
        if (nc_inq_nvars(ncid1, &nvars1)) ERR;
        if (nc_inq_nvars(ncid2, &nvars2)) ERR;
        if (nvars1 != nvars2) ERR;
@@ -473,4 +486,7 @@
        SUMMARIZE_ERR;
    }
    FINAL_RESULTS;
+#ifdef TEST_PNETCDF
+   MPI_Finalize();
+#endif
 }
diff netcdf-c/nc_test/tst_norm.c cdf5/nc_test/tst_norm.c
--- netcdf-c/nc_test/tst_norm.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test/tst_norm.c	2014-11-14 14:54:46.067475700 -0700
@@ -5,13 +5,14 @@
    This is a very simple example which tests NFC normalization of
    Unicode names encoded with UTF-8.
 
-   $Id: tst_norm.c,v 1.8 2008/10/20 01:48:08 ed Exp $
+   $Id: tst_norm.c 2792 2014-10-27 06:02:59Z wkliao $
 */
 #include <config.h>
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h>
 #include <netcdf.h>
+#include <netcdf_par.h>
 #include <nc_tests.h>
 
 /* The data file we will create. */
@@ -99,8 +100,15 @@
    int attvals[] = {42};
 #define ATTNUM ((sizeof attvals)/(sizeof attvals[0]))
 
+#ifdef TEST_PNETCDF
+MPI_Init(&argc, &argv);
+#endif
    printf("\n*** testing UTF-8 normalization...");
+#ifdef TEST_PNETCDF
+   if((res = nc_create_par(FILE7_NAME, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL,&ncid)))
+#else
    if((res = nc_create(FILE7_NAME, NC_CLOBBER, &ncid)))
+#endif
        ERR;
 
    /* Define dimension with unnormalized Unicode UTF-8 encoded name */
@@ -124,10 +132,11 @@
     * version of same name.  These should fail, as unnormalized name
     * should have been normalized in library, so these are attempts to
     * create duplicate netCDF objects. */
-   if ((res = nc_def_dim(ncid, NNAME, NX, &dimid))
-       != NC_ENAMEINUSE) ERR;
-   if ((res = nc_def_var(ncid, NNAME, NC_CHAR, NDIMS, dimids, &varid))
-       != NC_ENAMEINUSE) ERR;
+   if ((res = nc_def_dim(ncid, NNAME, NX, &dimid)) != NC_ENAMEINUSE)
+       ERR;
+
+   if ((res = nc_def_var(ncid, NNAME, NC_CHAR, NDIMS, dimids, &varid)) != NC_ENAMEINUSE)
+       ERR;
    if ((res = nc_enddef(ncid)))
        ERR;
 
@@ -138,7 +147,11 @@
        ERR;
 
    /* Check it out. */
+#ifdef TEST_PNETCDF
+   if ((res = nc_open_par(FILE7_NAME, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD,MPI_INFO_NULL, &ncid)))
+#else
    if ((res = nc_open(FILE7_NAME, NC_NOWRITE, &ncid)))
+#endif
        ERR;
    if ((res = nc_inq_varid(ncid, UNAME, &varid)))
        ERR;
@@ -169,6 +182,9 @@
        ERR;
 
    SUMMARIZE_ERR;
+#ifdef TEST_PNETCDF
+   MPI_Finalize();
+#endif
    FINAL_RESULTS;
    return 0;
 }
diff netcdf-c/nc_test/tst_small.c cdf5/nc_test/tst_small.c
--- netcdf-c/nc_test/tst_small.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test/tst_small.c	2014-11-14 14:54:46.068452200 -0700
@@ -4,19 +4,17 @@
 
    Test small files.
 
-   $Id: tst_small.c,v 1.15 2008/10/20 01:48:08 ed Exp $
+   $Id: tst_small.c 2796 2014-10-28 03:40:29Z wkliao $
 */
 
+#include <mpi.h>
 #include <nc_tests.h>
 #include <netcdf.h>
+#include <netcdf_par.h>
 
-/* Test everything for classic and 64-bit offsetfiles. If netcdf-4 is
+/* Test everything for classic, 64-bit offset, 64-bit data files. If netcdf-4 is
  * included, that means another whole round of testing. */
-#ifdef USE_NETCDF4
-#define NUM_FORMATS (4)
-#else
-#define NUM_FORMATS (2)
-#endif
+#define NUM_FORMATS (5)
 
 #define ATT_NAME "Atom"
 #define MAX_LEN 7   
@@ -41,13 +39,21 @@
 	 strncpy(att, source, t);
 	 
 	 /* Create a file with one attribute. */
+#ifdef TEST_PNETCDF
+         if (nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
 	 if (nc_create(testfile, NC_CLOBBER, &ncid)) ERR;
+#endif
 	 if (nc_put_att_text(ncid, NC_GLOBAL, ATT_NAME, t + 1, att)) ERR;
 	 if (f && nc_set_fill(ncid, NC_NOFILL, NULL)) ERR;
 	 if (nc_close(ncid)) ERR;
 	 
 	 /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+         if (nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
 	 if (nc_open(testfile, NC_NOWRITE, &ncid)) ERR;
+#endif
 	 if (nc_inq(ncid, &ndims, &nvars, &natts, &unlimdimid)) ERR;
 	 if (ndims != 0 && nvars != 0 && natts != 1 && unlimdimid != -1) ERR;
 	 if (nc_inq_attlen(ncid, NC_GLOBAL, ATT_NAME, &len_in)) ERR;
@@ -89,7 +95,11 @@
    
    /* Create a file with two dimensions, one unlimited, and one
     * var, and a global att. */
+#ifdef TEST_PNETCDF
+   if (nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_create(testfile, NC_CLOBBER, &ncid)) ERR;
+#endif
    if (nc_def_dim(ncid, DIM1_NAME, NC_UNLIMITED, dimids)) ERR;
    if (nc_def_dim(ncid, DIM2_NAME, STR_LEN, &dimids[1])) ERR;
    if (nc_def_var(ncid, VAR_NAME, NC_CHAR, 2, dimids, &varid)) ERR;
@@ -107,7 +117,11 @@
    if (nc_close(ncid)) ERR;
    
    /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+   if (nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_open(testfile, NC_NOWRITE, &ncid)) ERR;
+#endif
    if (nc_inq(ncid, &ndims, &nvars, &natts, &unlimdimid)) ERR;
    if (ndims != 2 && nvars != 1 && natts != 0 && unlimdimid != 0) ERR;
    if (nc_get_var_text(ncid, varid, (char *)data_in)) ERR;
@@ -134,7 +148,11 @@
    
    /* Create a file with two dimensions, one unlimited, and one
     * var, and a global att. */
+#ifdef TEST_PNETCDF
+   if (nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_create(testfile, NC_CLOBBER, &ncid)) ERR;
+#endif
    if (nc_def_dim(ncid, DIM1_NAME, NUM_VALS, dimids)) ERR;
    if (nc_def_dim(ncid, DIM2_NAME, STR_LEN, &dimids[1])) ERR;
    if (nc_def_var(ncid, VAR_NAME, NC_CHAR, NDIMS, dimids, &varid)) ERR;
@@ -152,7 +170,11 @@
    if (nc_close(ncid)) ERR;
    
    /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+   if (nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_open(testfile, NC_NOWRITE, &ncid)) ERR;
+#endif
    if (nc_inq(ncid, &ndims, &nvars, &natts, &unlimdimid)) ERR;
    if (ndims != 2 && nvars != 1 && natts != 0 && unlimdimid != -1) ERR;
    if (nc_get_var_text(ncid, varid, (char *)data_in)) ERR;
@@ -172,7 +194,11 @@
    size_t start[NDIMS], count[NDIMS];
 
    /* Create a file with one ulimited dimensions, and one var. */
+#ifdef TEST_PNETCDF
+   if (nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_create(testfile, NC_CLOBBER, &ncid)) ERR;
+#endif
    if (nc_def_dim(ncid, DIM1_NAME, NC_UNLIMITED, &dimid)) ERR;
    if (nc_def_var(ncid, VAR_NAME, NC_CHAR, 1, &dimid, &varid)) ERR;
    if (nc_enddef(ncid)) ERR;
@@ -186,7 +212,11 @@
    if (nc_close(ncid)) ERR;
    
    /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+   if (nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_open(testfile, NC_NOWRITE, &ncid)) ERR;
+#endif
    if (nc_inq(ncid, &ndims, &nvars, &natts, &unlimdimid)) ERR;
    if (ndims != 1 && nvars != 1 && natts != 0 && unlimdimid != 0) ERR;
    if (nc_get_var_text(ncid, varid, &data_in)) ERR;
@@ -215,7 +245,11 @@
    for (f = 0; f < 2; f++)
    {
       /* Create a file with one ulimited dimensions, and one var. */
+#ifdef TEST_PNETCDF
+      if (nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_create(testfile, NC_CLOBBER, &ncid)) ERR;
+#endif
       if (nc_def_dim(ncid, DIM1_NAME, NC_UNLIMITED, &dimid)) ERR;
       if (nc_def_var(ncid, VAR_NAME, NC_CHAR, 1, &dimid, &varid)) ERR;
       if (nc_close(ncid)) ERR;
@@ -225,7 +259,11 @@
       for (r = 0; r < MAX_RECS; r++)
       {
 	 /* Write one record of var data, a single character. */
+#ifdef TEST_PNETCDF
+	 if (nc_open_par(testfile, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
 	 if (nc_open(testfile, NC_WRITE, &ncid)) ERR;
+#endif
 	 if (f && nc_set_fill(ncid, NC_NOFILL, NULL)) ERR;
 	 count[0] = 1;
 	 start[0] = r;
@@ -233,7 +271,11 @@
 	 if (nc_close(ncid)) ERR;
       
 	 /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+         if (nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
 	 if (nc_open(testfile, NC_NOWRITE, &ncid)) ERR;
+#endif
 	 if (nc_inq_dimlen(ncid, 0, &len_in)) ERR;
 	 if (len_in != r + 1) ERR;
 	 index[0] = r;
@@ -260,7 +302,11 @@
    int r;
 
    /* Create a file with one ulimited dimensions, and one var. */
+#ifdef TEST_PNETCDF
+   if (nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_create(testfile, NC_CLOBBER, &ncid)) ERR;
+#endif
    if (nc_def_dim(ncid, DIM1_NAME, NC_UNLIMITED, &dimid)) ERR;
    if (nc_def_var(ncid, VAR_NAME, NC_CHAR, 1, &dimid, &varid)) ERR;
    if (nc_close(ncid)) ERR;
@@ -275,7 +321,11 @@
    for (r = 0; r < MAX_RECS; r++)
    {
       /* Write one record of var data, a single character. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(testfile, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(testfile, NC_WRITE, &ncid)) ERR;
+#endif
       count[0] = 1;
       start[0] = r;
       if (nc_put_vara_text(ncid, varid, start, count, &data[r])) ERR;
@@ -285,7 +335,11 @@
       if (nc_close(ncid)) ERR;
       
       /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(testfile, NC_NOWRITE, &ncid)) ERR;
+#endif
       if (nc_inq_dimlen(ncid, 0, &len_in)) ERR;
       if (len_in != r + 1) ERR;
       index[0] = r;
@@ -313,7 +367,11 @@
    int v, r;
 
    /* Create a file with one ulimited dimensions, and one var. */
+#ifdef TEST_PNETCDF
+   if (nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_create(testfile, NC_CLOBBER, &ncid)) ERR;
+#endif
    if (nc_def_dim(ncid, DIM1_NAME, NC_UNLIMITED, &dimid)) ERR;
    if (nc_def_var(ncid, VAR_NAME, NC_CHAR, 1, &dimid, &varid[0])) ERR;
    if (nc_def_var(ncid, VAR_NAME2, NC_CHAR, 1, &dimid, &varid[1])) ERR;
@@ -329,7 +387,11 @@
    for (r = 0; r < MAX_RECS; r++)
    {
       /* Write one record of var data, a single character. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(testfile, NC_WRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(testfile, NC_WRITE, &ncid)) ERR;
+#endif
       count[0] = 1;
       start[0] = r;
       sprintf(att_name, "a_%d", data[r]);
@@ -343,7 +405,11 @@
       if (nc_close(ncid)) ERR;
       
       /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+      if (nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
       if (nc_open(testfile, NC_NOWRITE, &ncid)) ERR;
+#endif
       if (nc_inq_dimlen(ncid, 0, &len_in)) ERR;
       if (len_in != r + 1) ERR;
       index[0] = r;
@@ -367,7 +433,11 @@
    size_t start[NDIMS], count[NDIMS];
 
    /* Create a file with one ulimited dimensions, and one var. */
+#ifdef TEST_PNETCDF
+   if (nc_create_par(testfile, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_create(testfile, NC_CLOBBER, &ncid)) ERR;
+#endif
    if (nc_def_dim(ncid, DIM1_NAME, NC_UNLIMITED, &dimid)) ERR;
    if (nc_def_var(ncid, VAR_NAME, NC_CHAR, 1, &dimid, &varid)) ERR;
    if (nc_put_att_text(ncid, NC_GLOBAL, ATT_NAME, 1, &data)) ERR;
@@ -382,7 +452,11 @@
    if (nc_close(ncid)) ERR;
    
    /* Reopen the file and check it. */
+#ifdef TEST_PNETCDF
+   if (nc_open_par(testfile, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid)) ERR;
+#else
    if (nc_open(testfile, NC_NOWRITE, &ncid)) ERR;
+#endif
    if (nc_inq(ncid, &ndims, &nvars, &natts, &unlimdimid)) ERR;
    if (ndims != 1 && nvars != 1 && natts != 0 && unlimdimid != 0) ERR;
    if (nc_get_var_text(ncid, varid, &data_in)) ERR;
@@ -399,6 +473,10 @@
    int i;
    char testfile[NC_MAX_NAME + 1];
 
+#ifdef TEST_PNETCDF
+   MPI_Init(&argc, &argv);
+#endif
+
    printf("\n*** Testing small files.\n");
    /*nc_set_log_level(3);*/
 
@@ -413,11 +491,16 @@
 	    printf("Switching to netCDF classic format.\n");
 	    strcpy(testfile, "tst_small_classic.nc");
 	    break;
-	 case NC_FORMAT_64BIT:
-	    nc_set_default_format(NC_FORMAT_64BIT, NULL);
+	 case NC_FORMAT_CDF2:
+	    nc_set_default_format(NC_FORMAT_CDF2, NULL);
 	    printf("Switching to 64-bit offset format.\n");
 	    strcpy(testfile, "tst_small_64bit.nc");
 	    break;
+	 case NC_FORMAT_CDF5:
+	    nc_set_default_format(NC_FORMAT_CDF5, NULL);
+	    printf("Switching to 64-bit data format.\n");
+	    strcpy(testfile, "tst_small_cdf5.nc");
+	    break;
 #ifdef USE_NETCDF4
 	 case NC_FORMAT_NETCDF4_CLASSIC:
 	    nc_set_default_format(NC_FORMAT_NETCDF4_CLASSIC, NULL);
@@ -429,6 +512,10 @@
 	    strcpy(testfile, "tst_small_netcdf4.nc");
 	    printf("Switching to netCDF-4 format.\n");
 	    break;
+#else
+	 case NC_FORMAT_NETCDF4_CLASSIC:
+	 case NC_FORMAT_NETCDF4:
+	    continue; /* loop i */
 #endif
 	 default:
 	    printf("Unexpected format!\n");
@@ -470,6 +557,9 @@
       SUMMARIZE_ERR;
    }
 
+#ifdef TEST_PNETCDF
+   MPI_Finalize();
+#endif
    FINAL_RESULTS;
 }
 
diff netcdf-c/nc_test/util.c cdf5/nc_test/util.c
--- netcdf-c/nc_test/util.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test/util.c	2014-11-14 14:54:46.069428700 -0700
@@ -1,7 +1,7 @@
 /*********************************************************************
  *   Copyright 1996, UCAR/Unidata
  *   See netcdf/COPYRIGHT file for copying and redistribution conditions.
- *   $Id: util.c,v 1.27 2006/12/10 13:59:56 ed Exp $
+ *   $Id: util.c 2792 2014-10-27 06:02:59Z wkliao $
  *********************************************************************/
 
 #include "tests.h"
@@ -23,12 +23,17 @@
     double min, max;
 
     switch (datatype) {
-	case NC_CHAR:   min = X_CHAR_MIN;   max = X_CHAR_MAX; break;
-	case NC_BYTE:   min = X_BYTE_MIN;   max = X_BYTE_MAX; break;
-	case NC_SHORT:  min = X_SHORT_MIN;  max = X_SHORT_MAX; break;
-	case NC_INT:   min = X_INT_MIN;   max = X_INT_MAX; break;
-	case NC_FLOAT:  min = X_FLOAT_MIN;  max = X_FLOAT_MAX; break;
-	case NC_DOUBLE: min = X_DOUBLE_MIN; max = X_DOUBLE_MAX; break;
+        case NC_CHAR:   return value >= X_CHAR_MIN   && value <= X_CHAR_MAX;
+        case NC_BYTE:   return value >= X_BYTE_MIN   && value <= X_BYTE_MAX;
+        case NC_SHORT:  return value >= X_SHORT_MIN  && value <= X_SHORT_MAX;
+        case NC_INT:    return value >= X_INT_MIN    && value <= X_INT_MAX;
+        case NC_FLOAT:  return value >= X_FLOAT_MIN  && value <= X_FLOAT_MAX;
+        case NC_DOUBLE: return value >= X_DOUBLE_MIN && value <= X_DOUBLE_MAX;
+        case NC_UBYTE:  return value >= 0            && value <= X_UCHAR_MAX;
+        case NC_USHORT: return value >= 0            && value <= X_USHORT_MAX;
+        case NC_UINT:   return value >= 0            && value <= X_UINT_MAX;
+        case NC_INT64:  return value >= X_INT64_MIN  && value <= X_INT64_MAX;
+        case NC_UINT64: return value >= 0            && value <= X_UINT64_MAX;
 	default:  assert(0);
     }
     return value >= min && value <= max;
@@ -45,6 +50,22 @@
 }
 
 static int
+inRange_schar(const double value, const nc_type datatype)
+{
+    /* check value of type datatype if within schar range */
+
+    if (datatype == NC_UBYTE) {
+        /* netCDF specification make a special case for type conversion between
+         * uchar and scahr: do not check for range error. See
+         * http://www.unidata.ucar.edu/software/netcdf/docs_rc/data_type.html#type_conversion
+         */
+        return(value >= X_CHAR_MIN && value <= X_CHAR_MAX);
+    }
+    /* else */
+    return inRange(value, datatype);
+}
+
+static int
 inRange_float(const double value, const nc_type datatype)
 {
     double min, max;
@@ -72,6 +93,11 @@
 			max = X_DOUBLE_MAX;
 		}
 		break;
+        case NC_UBYTE:  min = 0;            max = X_UCHAR_MAX;  break;
+        case NC_USHORT: min = 0;            max = X_USHORT_MAX; break;
+        case NC_UINT:   min = 0;            max = X_UINT_MAX;   break;
+        case NC_INT64:  min = X_INT64_MIN;  max = X_INT64_MAX;  break;
+        case NC_UINT64: min = 0;            max = X_UINT64_MAX; break;
 	default:  assert(0);
     }
     if(!( value >= min && value <= max)) {
@@ -104,6 +130,9 @@
     const nct_itype itype)
 {
     switch (itype) {
+        case NCT_SCHAR:
+        case NCT_CHAR:
+            return inRange_schar(value, datatype);
     case NCT_UCHAR:
 	return inRange_uchar(value, datatype);
     case NCT_FLOAT:
@@ -239,13 +268,22 @@
         case NC_SHORT: *result = *((short *) p); break;
         case NC_INT:
 #if INT_MAX >= X_INT_MAX
-		*result = *((int *) p);
+		*result = *((int *) p); break;
 #else
-		*result = *((long *) p);
+		*result = *((long *) p); break;
 #endif
-		break;
         case NC_FLOAT: *result = *((float *) p); break;
         case NC_DOUBLE: *result = *((double *) p); break;
+        case NC_UBYTE:  *result = *((unsigned char *)  p); break;
+        case NC_USHORT: *result = *((unsigned short *) p); break;
+        case NC_UINT:
+#if UINT_MAX >= X_UINT_MAX
+            *result = *((unsigned int *) p); break;
+#else
+            *result = *((unsigned long *) p); break;
+#endif
+        case NC_INT64:  *result = *((long long *)          p); break;
+        case NC_UINT64: *result = *((unsigned long long *) p); break;
         default: return 1;
     }
     return 0;
@@ -290,6 +328,35 @@
             case NC_DOUBLE:
                 *((double *) p) = d;
                 break;
+        case NC_UBYTE:
+            r = floor(0.5+d);
+            if ( r < 0.0  ||  r > uchar_max )  return 2;
+            *((unsigned char *) p) = r;
+            break;
+        case NC_USHORT:
+            r = floor(0.5+d);
+            if ( r < 0.0  ||  r > ushort_max )  return 2;
+            *((unsigned short *) p) = r;
+            break;
+        case NC_UINT:
+            r = floor(0.5+d);
+            if ( r < 0.0  ||  r > uint_max )  return 2;
+#if UINT_MAX >= X_UINT_MAX
+            *((unsigned int  *) p) = r;
+#else
+            *((unsigned long *) p) = r;
+#endif
+            break;
+        case NC_INT64:
+            r = floor(0.5+d);
+            if ( r < int64_min  ||  r > int64_max )  return 2;
+            *((long long *) p) = r;
+            break;
+        case NC_UINT64:
+            r = floor(0.5+d);
+            if ( r < 0.0  ||  r > uint64_max )  return 2;
+            *((unsigned long long *) p) = r;
+            break;
             default:
                 return 1;
         }
@@ -322,6 +389,12 @@
 		    case NC_INT:   return X_INT_MIN;
 		    case NC_FLOAT:  return X_FLOAT_MIN;
 		    case NC_DOUBLE: return X_DOUBLE_MIN;
+                    case NC_UBYTE:  return 0;
+                    case NC_USHORT: return 0;
+                    case NC_UINT:   return 0;
+                    case NC_INT64:  return X_INT_MIN - 128.0; /* slight smaller
+                                                                 than INT_MIN */
+                    case NC_UINT64: return 0;
 		    default:  assert(0);
 		}
 	    case 1:
@@ -332,6 +405,13 @@
 		    case NC_INT:   return X_INT_MAX;
 		    case NC_FLOAT:  return X_FLOAT_MAX;
 		    case NC_DOUBLE: return X_DOUBLE_MAX;
+                    case NC_UBYTE:  return X_UCHAR_MAX;
+                    case NC_USHORT: return X_USHORT_MAX;
+                    case NC_UINT:   return X_UINT_MAX;
+                    case NC_INT64:  return X_INT_MAX + 128.0;
+                                    /* slightly bigger than INT_MAX */
+                    case NC_UINT64: return X_UINT_MAX + 128.0;
+                                    /* slightly bigger than UINT_MAX */
 		    default:  assert(0);
 		}
 	    case 2:
@@ -342,6 +422,11 @@
 		    case NC_INT:   return X_INT_MIN-1.0;
 		    case NC_FLOAT:  return X_FLOAT_MIN * (1.0 + FUZZ);
 		    case NC_DOUBLE: return -1.0;
+                    case NC_UBYTE:  return -1.0;
+                    case NC_USHORT: return -1.0;
+                    case NC_UINT:   return -1.0;
+                    case NC_INT64:  return -1.0;  /* skip test */
+                    case NC_UINT64: return -1.0;
 		    default:  assert(0);
 		}
 	    case 3:
@@ -352,6 +437,11 @@
 		    case NC_INT:   return X_INT_MAX+1.0;
 		    case NC_FLOAT:  return X_FLOAT_MAX * (1.0 + FUZZ);
 		    case NC_DOUBLE: return 1.0;
+                    case NC_UBYTE:  return X_UCHAR_MAX +1.0;
+                    case NC_USHORT: return X_USHORT_MAX+1.0;
+                    case NC_UINT:   return X_UINT_MAX  +1.0;
+                    case NC_INT64:  return 1.0;    /* skip test */
+                    case NC_UINT64: return 1.0;    /* skip test */
 		    default:  assert(0);
 		}
 	}
@@ -363,6 +453,13 @@
 	    case NC_INT: base = -20; break;
 	    case NC_FLOAT: base = -9; break;
 	    case NC_DOUBLE: base = -10; break;
+
+            /* not sure what right values are */
+            case NC_UBYTE:   base =   2;  break;
+            case NC_USHORT:  base =   5;  break;
+            case NC_UINT:    base =  20;  break;
+            case NC_INT64:   base = -20;  break;
+            case NC_UINT64:  base =  20;  break;
 	    default:  assert(0);
 	}
 	result = rank < 0 ? base * 7 : base * (rank + 1);
@@ -397,6 +494,12 @@
 		    case NC_INT:   return SANE_INT;
 		    case NC_FLOAT:  return SANE_FLOAT;
 		    case NC_DOUBLE: return SANE_DOUBLE;
+                    case NC_UBYTE:  return 0;
+                    case NC_USHORT: return 0;
+                    case NC_UINT:   return 0;
+                    case NC_INT64:  return X_INT_MIN - 128.0; /* slight smaller
+                                                                 than INT_MIN */
+                    case NC_UINT64: return 0;
 		    default:  assert(0);
 		}
 	    case 1:
@@ -407,6 +510,13 @@
 		    case NC_INT:   return SANE_INT;
 		    case NC_FLOAT:  return SANE_FLOAT;
 		    case NC_DOUBLE: return SANE_DOUBLE;
+                    case NC_UBYTE:  return X_UCHAR_MAX;
+                    case NC_USHORT: return X_USHORT_MAX;
+                    case NC_UINT:   return X_UINT_MAX;
+                    case NC_INT64:  return X_INT_MAX + 128.0;
+                                    /* slightly bigger than INT_MAX */
+                    case NC_UINT64: return X_UINT_MAX + 128.0;
+                                    /* slightly bigger than UINT_MAX */
 		    default:  assert(0);
 		}
 	    case 2:
@@ -417,6 +527,11 @@
 		    case NC_INT:   return SANE_INT-1.0;
 		    case NC_FLOAT:  return SANE_FLOAT * (1.0 + FUZZ);
 		    case NC_DOUBLE: return -1.0;
+                    case NC_UBYTE:  return -1.0;
+                    case NC_USHORT: return -1.0;
+                    case NC_UINT:   return -1.0;
+                    case NC_INT64:  return -1.0;  /* skip test */
+                    case NC_UINT64: return -1.0;
 		    default:  assert(0);
 		}
 	    case 3:
@@ -427,6 +542,11 @@
 		    case NC_INT:   return SANE_INT+1.0;
 		    case NC_FLOAT:  return SANE_FLOAT * (1.0 + FUZZ);
 		    case NC_DOUBLE: return 1.0;
+                    case NC_UBYTE:  return X_UCHAR_MAX +1.0;
+                    case NC_USHORT: return X_USHORT_MAX+1.0;
+                    case NC_UINT:   return X_UINT_MAX  +1.0;
+                    case NC_INT64:  return 1.0;    /* skip test */
+                    case NC_UINT64: return 1.0;    /* skip test */
 		    default:  assert(0);
 		}
 	}
@@ -438,6 +558,13 @@
 	    case NC_INT: base = -20; break;
 	    case NC_FLOAT: base = -9; break;
 	    case NC_DOUBLE: base = -10; break;
+
+            /* not sure what right values are */
+            case NC_UBYTE:   base =   2;  break;
+            case NC_USHORT:  base =   5;  break;
+            case NC_UINT:    base =  20;  break;
+            case NC_INT64:   base = -20;  break;
+            case NC_UINT64:  base =  20;  break;
 	    default:  assert(0);
 	}
 	result = rank < 0 ? base * 7 : base * (rank + 1);
@@ -472,6 +599,11 @@
         case 'i': return NC_INT;
         case 'f': return NC_FLOAT;
         case 'd': return NC_DOUBLE;
+        case 'y': return NC_UBYTE;
+        case 't': return NC_USHORT;
+        case 'u': return NC_UINT;
+        case 'x': return NC_INT64;
+        case 'z': return NC_UINT64;
         default:  assert(0);
     }
     return NC_CHAR;  /* Just to keep compiler happy */
@@ -495,7 +627,7 @@
 init_gatts(const char *type_letter)
 {
 	int attid;
-	for (attid = 0; attid < NGATTS; attid++)
+	for (attid = 0; attid < numGatts; attid++)
 	{
 		gatt_name[attid][0] = 'G';
 		gatt_name[attid][1] = type_letter[attid];
@@ -528,7 +660,10 @@
 		MAX_DIM_LEN,
 		MAX_DIM_LEN
 	};
-	const char type_letter[] = "cbsifd";
+    const char type_letter[] = "cbsifdytuxz";
+    /* c:char, b:byte, s:short, i:int, f:float, d:double, y:ubyte, t:ushort,
+     * u:uint, x:int64, z:uint64
+     */
 	const char digit[] = "r123456789";
 
 	size_t rank;
@@ -540,6 +675,9 @@
 
 	init_dims(digit);
 
+	for (vn=0; vn<numVars; vn++)
+	    memset(var_name[vn], 0, 2+MAX_RANK);
+
 	for (rank = 0, vn = 0, xtype = 0, an = 0;  rank <= MAX_RANK; rank++)
 	{
 			/* number variables of a type and rank */
@@ -549,11 +687,11 @@
 		for (jj = 0; jj < nvars; jj++)
 		{
 				/* number types of this shape */
-			const int ntypes = rank < 2 ? NTYPES : 1;
+			const int ntypes = rank < 2 ? numTypes : 1;
 
 			int tc;
 			for (tc = 0; tc < ntypes;
-			     tc++, vn++, xtype = (xtype + 1) % NTYPES)
+			     tc++, vn++, xtype = (xtype + 1) % numTypes)
 			{
 				size_t tmp[MAX_RANK];
 
@@ -565,10 +703,10 @@
 					int ac;
 					for (ac = 0; ac < var_natts[vn]; ac++, an++)
 					{
-						att_name[vn][ac][0] = type_letter[an % NTYPES];
+						att_name[vn][ac][0] = type_letter[an % numTypes];
 						att_name[vn][ac][1] = '\0';
 						att_len[vn][ac] = an;
-						att_type[vn][ac] = char2type (type_letter[an % NTYPES]);
+						att_type[vn][ac] = char2type (type_letter[an % numTypes]);
 					}
 				} /* ac block */
 #ifndef NDEBUG
@@ -622,7 +760,7 @@
     int  i;
     int var_id;
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	err = nc_def_var(ncid, var_name[i], var_type[i], var_rank[i],
 	    var_dimid[i], &var_id);
 	IF (err) error("nc_def_var: %s", nc_strerror(err));
@@ -642,7 +780,7 @@
     double att[MAX_NELS];
     char catt[MAX_NELS];
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	for (j = 0; j < NATTS(i); j++) {
 	    if (ATT_TYPE(i,j) == NC_CHAR) {
 		for (k = 0; k < ATT_LEN(i,j); k++) {
@@ -686,7 +824,7 @@
 
     for (j = 0; j < MAX_RANK; j++)
 	start[j] = 0;
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
 	for (allInRange = 1, j = 0; j < var_nels[i]; j++) {
 	    err = toMixedBase(j, var_rank[i], var_shape[i], index);
 	    IF (err) error("toMixedBase");
@@ -722,7 +860,11 @@
     int  ncid;			/* netCDF id */
     int  err;		/* status */
 
+#ifdef TEST_PNETCDF
+    err = nc_create_par(filename, NC_CLOBBER|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_create(filename, NC_CLOBBER, &ncid);
+#endif
     IF (err) 
 	error("nc_create: %s", nc_strerror(err));
 
@@ -784,7 +926,7 @@
     size_t length;
     int nok = 0;      /* count of valid comparisons */
 
-    for (i = 0; i < NVARS; i++) {
+    for (i = 0; i < numVars; i++) {
         isChar = var_type[i] == NC_CHAR;
 	err = nc_inq_var(ncid, i, name, &datatype, &ndims, dimids, NULL);
 	IF (err) 
@@ -866,7 +1008,7 @@
     double expect;
     int nok = 0;      /* count of valid comparisons */
 
-    for (i = -1; i < NVARS; i++) {
+    for (i = -1; i < numVars; i++) {
 	for (j = 0; j < NATTS(i); j++) {
             err = nc_inq_attname(ncid, i, j, name);
             IF (err) 
@@ -919,7 +1061,11 @@
     int  ncid;		/* netCDF id */
     int  err;		/* status */
 
+#ifdef TEST_PNETCDF
+    err = nc_open_par(filename, NC_NOWRITE|NC_PNETCDF, MPI_COMM_WORLD, MPI_INFO_NULL, &ncid);
+#else
     err = nc_open(filename, NC_NOWRITE, &ncid);
+#endif
     IF (err) {
         error("nc_open: %s", nc_strerror(err));
     } else {
@@ -937,18 +1083,17 @@
 s_nc_type(nc_type type)
 {
 	switch((int)type){
-	case NC_BYTE:
-		return "NC_BYTE";
-	case NC_CHAR:
-		return "NC_CHAR";
-	case NC_SHORT:
-		return "NC_SHORT";
-	case NC_INT:
-		return "NC_INT";
-	case NC_FLOAT:
-		return "NC_FLOAT";
-	case NC_DOUBLE:
-		return "NC_DOUBLE";
+        case NC_CHAR:   return "NC_CHAR";
+        case NC_BYTE:   return "NC_BYTE";
+        case NC_UBYTE:  return "NC_UBYTE";
+        case NC_SHORT:  return "NC_SHORT";
+        case NC_USHORT: return "NC_USHORT";
+        case NC_INT:    return "NC_INT";
+        case NC_UINT:   return "NC_UINT";
+        case NC_FLOAT:  return "NC_FLOAT";
+        case NC_DOUBLE: return "NC_DOUBLE";
+        case NC_INT64:  return "NC_INT64";
+        case NC_UINT64: return "NC_UINT64";
 	}
 	return "";
 }
diff netcdf-c/nc_test4/bm_file.c cdf5/nc_test4/bm_file.c
--- netcdf-c/nc_test4/bm_file.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test4/bm_file.c	2014-11-14 14:54:46.070405200 -0700
@@ -868,9 +868,12 @@
 	    {
 	       case NC_FORMAT_CLASSIC:
 		  break;
-	       case NC_FORMAT_64BIT:
+	       case NC_FORMAT_CDF2:
 		  cmode = NC_64BIT_OFFSET;
 		  break;
+	       case NC_FORMAT_CDF5:
+		  cmode = NC_64BIT_DATA;
+		  break;
 	       case NC_FORMAT_NETCDF4:
 		  cmode = NC_NETCDF4;
 		  break;
diff netcdf-c/nc_test4/tst_converts.c cdf5/nc_test4/tst_converts.c
--- netcdf-c/nc_test4/tst_converts.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test4/tst_converts.c	2014-11-14 14:54:46.071381700 -0700
@@ -53,8 +53,10 @@
    int ncid, varid, cflags=0, dimids[1];
    int retval;
 
-   if (format == NC_FORMAT_64BIT)
+   if (format == NC_FORMAT_CDF2)
       cflags |= NC_64BIT_OFFSET;
+   else if (format == NC_FORMAT_CDF5)
+      cflags |= NC_64BIT_DATA;
    else if (format == NC_FORMAT_NETCDF4_CLASSIC)
    {
       cflags |= (NC_NETCDF4|NC_CLASSIC_MODEL);
diff netcdf-c/nc_test4/tst_files.c cdf5/nc_test4/tst_files.c
--- netcdf-c/nc_test4/tst_files.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/nc_test4/tst_files.c	2014-11-14 14:54:46.071381700 -0700
@@ -259,7 +259,7 @@
    test_redef(NC_FORMAT_CLASSIC);
    SUMMARIZE_ERR;
    printf("*** testing redef for netCDF 64-bit offset...");
-   test_redef(NC_FORMAT_64BIT);
+   test_redef(NC_FORMAT_CDF2);
    SUMMARIZE_ERR;
    printf("*** testing redef for netCDF-4 ...");
    test_redef(NC_FORMAT_NETCDF4);
@@ -281,7 +281,7 @@
       /* Create a netcdf-3 64-bit offset file. */
       if (nc_create(FILE_NAME, NC_64BIT_OFFSET|NC_CLOBBER, &ncid)) ERR;
       if (nc_inq_format(ncid, &format)) ERR;
-      if (format != NC_FORMAT_64BIT) ERR;
+      if (format != NC_FORMAT_CDF2) ERR;
       if (nc_close(ncid)) ERR;
 
       /* Create a netcdf-4 file. */
@@ -305,7 +305,7 @@
       /* Create a netcdf-3 64-bit offset file. */
       if (nc_create(FILE_NAME, NC_64BIT_OFFSET|NC_CLOBBER|NC_CLASSIC_MODEL, &ncid)) ERR;
       if (nc_inq_format(ncid, &format)) ERR;
-      if (format != NC_FORMAT_64BIT) ERR;
+      if (format != NC_FORMAT_CDF2) ERR;
       if (nc_close(ncid)) ERR;
    }
    SUMMARIZE_ERR;
@@ -395,8 +395,10 @@
    float cache_preemption_in;
    int ret;
 
-   if (format == NC_FORMAT_64BIT)
+   if (format == NC_FORMAT_CDF2)
       cflags |= NC_64BIT_OFFSET;
+   else if (format == NC_FORMAT_CDF5)
+      cflags |= NC_64BIT_DATA;
    else if (format == NC_FORMAT_NETCDF4_CLASSIC)
       cflags |= (NC_NETCDF4|NC_CLASSIC_MODEL);
    else if (format == NC_FORMAT_NETCDF4)
diff netcdf-c/ncdump/nccopy.c cdf5/ncdump/nccopy.c
--- netcdf-c/ncdump/nccopy.c	2015-03-09 13:48:02.810835600 -0600
+++ cdf5/ncdump/nccopy.c	2014-11-14 14:54:46.073334700 -0700
@@ -3,7 +3,7 @@
  *   See netcdf/README file for copying and redistribution conditions.
  *   Thanks to Philippe Poilbarbe and Antonio S. Cofiño for 
  *   compression additions.
- *   $Id: nccopy.c 400 2010-08-27 21:02:52Z russ $
+ *   $Id: nccopy.c 2796 2014-10-28 03:40:29Z wkliao $
  *********************************************************************/
 
 #include "config.h"		/* for USE_NETCDF4 macro */
@@ -1154,7 +1154,8 @@
  * to copy data a record at a time. */
 static int
 nc3_special_case(int ncid, int kind) {
-    if (kind == NC_FORMAT_CLASSIC ||  kind == NC_FORMAT_64BIT) {
+    if (kind == NC_FORMAT_CLASSIC ||  kind == NC_FORMAT_CDF2 ||
+        kind == NC_FORMAT_CDF5) {
 	int recdimid = 0;
 	NC_CHECK(nc_inq_unlimdim(ncid, &recdimid));
 	if (recdimid != -1) {	/* we have a record dimension */
@@ -1364,7 +1365,8 @@
     if (option_kind == SAME_AS_INPUT) {	/* default, kind not specified */
 	outkind = inkind;
 	/* Deduce output kind if netCDF-4 features requested */
-	if (inkind == NC_FORMAT_CLASSIC || inkind == NC_FORMAT_64BIT) { 
+	if (inkind == NC_FORMAT_CLASSIC || inkind == NC_FORMAT_CDF2 ||
+	    inkind == NC_FORMAT_CDF5) { 
 	    if (option_deflate_level > 0 || 
 		option_shuffle_vars == NC_SHUFFLE || 
 		option_chunkspec) 
@@ -1402,9 +1404,12 @@
     case NC_FORMAT_CLASSIC:
 	/* nothing to do */
 	break;
-    case NC_FORMAT_64BIT:
+    case NC_FORMAT_CDF2:
 	create_mode |= NC_64BIT_OFFSET;
 	break;
+    case NC_FORMAT_CDF5:
+	create_mode |= NC_64BIT_DATA;
+	break;
 #ifdef USE_NETCDF4
     case NC_FORMAT_NETCDF4:
 	create_mode |= NC_NETCDF4;
@@ -1510,7 +1515,8 @@
 {
 #define USAGE   "\
   [-k n]    specify kind of netCDF format for output file, default same as input\n\
-	    1 classic, 2 64-bit offset, 3 netCDF-4, 4 netCDF-4 classic model\n\
+	    1 classic, 2 64-bit offset, 3 netCDF-4, 4 netCDF-4 classic model,\n\
+	    5 classic CDF-5\n\
   [-d n]    set deflation compression level, default same as input (0=none 9=max)\n\
   [-s]      add shuffle option to deflation compression\n\
   [-c chunkspec] specify chunking for dimensions, e.g. \"dim1/N1,dim2/N2,...\"\n\
@@ -1523,7 +1529,7 @@
   [-m n]    set size in bytes of copy buffer, default is 5000000 bytes\n\
   [-h n]    set size in bytes of chunk_cache for chunked variables\n\
   [-e n]    set number of elements that chunk_cache can hold\n\
-  [-r]      read whole input file into diskless file on open (classic or 64-bit offset format only)\n\
+  [-r]      read whole input file into diskless file on open (classic or 64-bit offset/data format only)\n\
   infile    name of netCDF input file\n\
   outfile   name for netCDF output file\n"
 
@@ -1550,9 +1556,9 @@
 	{"classic", NC_FORMAT_CLASSIC},
 	
 	/* The 64-bit offset kind (2) */
-	{"2", NC_FORMAT_64BIT},
-	{"64-bit-offset", NC_FORMAT_64BIT},
-	{"64-bit offset", NC_FORMAT_64BIT},
+	{"2", NC_FORMAT_CDF2},
+	{"64-bit-offset", NC_FORMAT_CDF2},
+	{"64-bit offset", NC_FORMAT_CDF2},
 	
 	/* NetCDF-4 HDF5 format */
 	{"3", NC_FORMAT_NETCDF4},
@@ -1568,6 +1574,11 @@
 	{"netCDF4_classic", NC_FORMAT_NETCDF4_CLASSIC},
 	{"enhanced-nc3", NC_FORMAT_NETCDF4_CLASSIC},
 
+	/* The 64-bit data kind (5) */
+	{"5", NC_FORMAT_CDF5},
+	{"64-bit-data", NC_FORMAT_CDF5},
+	{"64-bit data", NC_FORMAT_CDF5},
+	
 	/* null terminate*/
 	{NULL,0}
     };
@@ -1588,12 +1599,15 @@
                      2 (=> classic 64 bit offsets)
                      3 (=> netCDF-4/HDF5)
                      4 (=> classic, but stored in netCDF-4/HDF5 format)
+                     5 (=> classic 64 bit data, CDF-5)
                      Also allow string versions of above
                      "classic"
                      "64-bit-offset"
                      "64-bit offset"
 		     "enhanced" | "hdf5" | "netCDF-4"
                      "enhanced-nc3" | "hdf5-nc3" | "netCDF-4 classic model"
+                     "64-bit-data"
+                     "64-bit data"
 		   */
 	    {
 		struct Kvalues* kvalue;
diff netcdf-c/ncdump/ncdump.c cdf5/ncdump/ncdump.c
--- netcdf-c/ncdump/ncdump.c	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/ncdump/ncdump.c	2014-11-14 14:54:46.081146700 -0700
@@ -162,7 +162,6 @@
 	return "float";
       case NC_DOUBLE:
 	return "double";
-#ifdef USE_NETCDF4
       case NC_UBYTE:
 	return "ubyte";
       case NC_USHORT:
@@ -173,6 +172,7 @@
 	return "int64";
       case NC_UINT64:
 	return "uint64";
+#ifdef USE_NETCDF4
       case NC_STRING:
 	return "string";
       case NC_VLEN:
@@ -226,8 +226,10 @@
     switch (kind) {
     case NC_FORMAT_CLASSIC:
 	return "classic";
-    case NC_FORMAT_64BIT:
+    case NC_FORMAT_CDF2:
 	return "64-bit offset";
+    case NC_FORMAT_CDF5:
+	return "64-bit data";
     case NC_FORMAT_NETCDF4:
 	return "netCDF-4";
     case NC_FORMAT_NETCDF4_CLASSIC:
@@ -246,7 +248,9 @@
     static char text[1024];
     switch (kind) {
     case NC_FORMAT_NC3:
-	if(mode & NC_64BIT_OFFSET)
+	if(mode & NC_64BIT_DATA)
+	    snprintf(text,sizeof(text),"%s mode=%08x", "64-bit data",mode);
+	else if(mode & NC_64BIT_OFFSET)
 	    snprintf(text,sizeof(text),"%s mode=%08x", "64-bit offset",mode);
 	else
 	    snprintf(text,sizeof(text),"%s mode=%08x", "classic",mode);
@@ -320,7 +324,7 @@
 	    break;
 	case '\n':		
 	    /* Only generate linebreaks after embedded newlines for
-	     * classic, 64-bit offset, or classic model files.  For
+	     * classic, 64-bit offset/data, or classic model files.  For
 	     * netCDF-4 files, don't generate linebreaks, because that
 	     * would create an extra string in a list of strings.  */
 	    if (kind != NC_FORMAT_NETCDF4) {
@@ -435,12 +439,12 @@
     char gps[PRIM_LEN];
     float ff;
     double dd;
-#ifdef USE_NETCDF4
     unsigned char uc;
     unsigned short us;
     unsigned int ui;
     int64_t i64;
     uint64_t ui64;
+#ifdef USE_NETCDF4
     char *stringp;
 #endif /* USE_NETCDF4 */
     char *delim = ", ";	/* delimiter between output values */
@@ -505,7 +509,6 @@
 		}
 	    }
 	    break;
-#ifdef USE_NETCDF4
 	case NC_UBYTE:
 	    uc = ((unsigned char *) vals)[iel];
 	    printf ("%uUB%s", uc, delim);
@@ -526,6 +529,7 @@
 	    ui64 = ((uint64_t *) vals)[iel];
 	    printf ("%lluUL%s", ui64, delim);
 	    break;
+#ifdef USE_NETCDF4
 	case NC_STRING:
 	    stringp = ((char **) vals)[iel];
             if(stringp)
@@ -561,11 +565,9 @@
     float ff;
     double dd;
     int ii;
-#ifdef USE_NETCDF4
     unsigned int ui;
     int64_t i64;
     uint64_t ui64;
-#endif /* USE_NETCDF4 */
 
     attvals[0]='\0';
     if (len == 0)
@@ -583,7 +585,6 @@
 	    (void) strlcat(attvals, gps, attvalslen);
 	    (void) strlcat(attvals, iel < len-1 ? " " : "", attvalslen);
 	    break;
-#ifdef USE_NETCDF4
 	case NC_UBYTE:
 	case NC_USHORT:
 	case NC_UINT:
@@ -607,7 +608,6 @@
 	    (void) strlcat(attvals, gps, attvalslen);
 	    (void) strlcat(attvals, iel < len-1 ? " " : "", attvalslen);
 	    break;
-#endif /* USE_NETCDF4 */
 	case NC_FLOAT:
 	    ff = vals[iel];
 	    res = snprintf(gps, PRIM_LEN, float_attx_fmt, ff);
@@ -1107,7 +1107,6 @@
 	case NC_INT:
 	    memval = *(int *)&data;
 	    break;
-#ifdef USE_NETCDF4
 	case NC_UBYTE:
 	    memval = *(unsigned char *)&data;
 	    break;
@@ -1123,7 +1122,6 @@
 	case NC_UINT64:
 	    memval = *(uint64_t *)&data;
 	    break;
-#endif /* USE_NETCDF4 */
 	default:
 	    error("Bad base type for enum!");
 	    break;
@@ -1262,7 +1260,6 @@
 	case NC_DOUBLE:
 	    *(double *)fillvalp = NC_FILL_DOUBLE;
 	    break;
-#ifdef USE_NETCDF4
 	case NC_UBYTE:
 	    /* don't do default fill-values for bytes, too risky */
 	    vp->has_fillval = 0;
@@ -1281,6 +1278,7 @@
 	case NC_UINT64:
 	    *(uint64_t *)fillvalp = NC_FILL_UINT64;
 	    break;
+#ifdef USE_NETCDF4
 	case NC_STRING:
 	    *((char **)fillvalp) = strdup(NC_FILL_STRING);
 	    break;
@@ -1469,7 +1467,7 @@
    /* Because netCDF-4 can have a string attribute with multiple
     * string values, we can't output strings with embedded newlines
     * as what look like multiple strings, as we do for classic and
-    * 64-bit offset files.  So we need to know the output file type
+    * 64-bit offset/data files.  So we need to know the output file type
     * to know how to print strings with embedded newlines. */
    NC_CHECK( nc_inq_format(ncid, &kind) );
        
diff netcdf-c/ncdump/tst_64bit.sh cdf5/ncdump/tst_64bit.sh
--- netcdf-c/ncdump/tst_64bit.sh	2014-04-14 17:59:12.184677500 -0600
+++ cdf5/ncdump/tst_64bit.sh	2014-11-14 14:54:46.089935200 -0700
@@ -6,13 +6,28 @@
 echo "*** Testing ncgen and ncdump with 64-bit offset format."
 set -e
 echo "*** creating test0.nc from test0.cdl..."
-../ncgen/ncgen -b -v2 $srcdir/test0.cdl
+../ncgen/ncgen -b -k2 $srcdir/test0.cdl
 echo "*** creating test1.cdl from test0.nc..."
 ./ncdump -n test1 test0.nc > test1.cdl
 echo "*** creating test1.nc from test1.cdl..."
-../ncgen/ncgen -b -v2 test1.cdl
+../ncgen/ncgen -b -k2 test1.cdl
 echo "*** creating test2.cdl from test1.nc..."
 ./ncdump test1.nc > test2.cdl
 cmp test1.cdl test2.cdl
 echo "*** All ncgen and ncdump with 64-bit offset format tests passed!"
+
+echo ""
+echo "*** Testing ncgen and ncdump with 64-bit data format."
+set -e
+echo "*** creating test0.nc from test0.cdl..."
+../ncgen/ncgen -b -k5 $srcdir/test0.cdl
+echo "*** creating test1.cdl from test0.nc..."
+./ncdump -n test1 test0.nc > test1.cdl
+echo "*** creating test1.nc from test1.cdl..."
+../ncgen/ncgen -b -k5 test1.cdl
+echo "*** creating test2.cdl from test1.nc..."
+./ncdump test1.nc > test2.cdl
+cmp test1.cdl test2.cdl
+echo "*** All ncgen and ncdump with 64-bit data format tests passed!"
+
 exit 0
diff netcdf-c/ncdump/tst_formatx3.sh cdf5/ncdump/tst_formatx3.sh
--- netcdf-c/ncdump/tst_formatx3.sh	2015-03-09 13:48:02.826460700 -0600
+++ cdf5/ncdump/tst_formatx3.sh	2014-11-14 14:54:46.090911700 -0700
@@ -30,6 +30,15 @@
 ECODE=1
 fi
 
+echo "Test extended format output for a 64-bit CDF-5 classic file"
+rm -f tmp
+../ncgen/ncgen -k5 -b -o ./test.nc $srcdir/ref_tst_small.cdl
+./ncdump -K test.nc >tmp
+if ! fgrep '64-bit data mode=00000010' <tmp ; then
+echo "*** Fail: extended format for a 64-bit CDF-5 classic file"
+ECODE=1
+fi
+
 rm -f tmp test.nc
 
 exit $ECODE
diff netcdf-c/ncdump/tst_lengths.sh cdf5/ncdump/tst_lengths.sh
--- netcdf-c/ncdump/tst_lengths.sh	2015-03-09 13:48:02.842085800 -0600
+++ cdf5/ncdump/tst_lengths.sh	2014-11-14 14:54:46.091888200 -0700
@@ -82,6 +82,30 @@
     exit 1
 fi
 
+echo "*** testing length of 64-bit data file"
+../ncgen/ncgen -b -k64-bit-data ${srcdir}/small.cdl
+if test `wc -c < small.nc` != 104; then
+    exit 1
+fi
+
+echo "*** testing length of 64-bit data file written with NOFILL"
+../ncgen/ncgen -b -k64-bit-data -x ${srcdir}/small.cdl
+if test `wc -c < small.nc` != 104; then
+    exit 1
+fi
+
+echo "*** testing length of rewritten 64-bit data file"
+../ncgen/ncgen -b -k64-bit-data ${srcdir}/small.cdl && ./rewrite-scalar small.nc t
+if test `wc -c < small.nc` != 104; then
+    exit 1
+fi
+
+echo "*** testing length of rewritten 64-bit data file written with NOFILL"
+../ncgen/ncgen -b -k64-bit-data -x ${srcdir}/small.cdl && ./rewrite-scalar small.nc t
+if test `wc -c < small.nc` != 104; then
+    exit 1
+fi
+
 # test with only one record variable of type byte or short, which need
 # not be 4-byte aligned
 echo "*** testing length of one-record-variable classic file"
@@ -107,3 +131,16 @@
 if test `wc -c < small2.nc` != 105; then
     exit 1
 fi
+
+echo "*** testing length of one-record-variable 64-bit data file"
+../ncgen/ncgen -b -k64-bit-data ${srcdir}/small2.cdl
+if test `wc -c < small2.nc` != 161; then
+    exit 1
+fi
+
+echo "*** testing length of one-record-variable 64-bit data file written with NOFILL"
+../ncgen/ncgen -b -k64-bit-data -x ${srcdir}/small2.cdl
+if test `wc -c < small2.nc` != 161; then
+    exit 1
+fi
+
diff netcdf-c/ncgen/escapes.c cdf5/ncgen/escapes.c
--- netcdf-c/ncgen/escapes.c	2014-11-14 15:15:16.659820900 -0700
+++ cdf5/ncgen/escapes.c	2014-11-14 13:32:35.095301200 -0700
@@ -461,13 +461,13 @@
 contain utf8 characters to one that is
 acceptable to the Java compiler.
 Basically this means convert the printables
-using ccodify (above) equivalent and then escape
+using codify (above) equivalent and then escape
 all the utf chars.
 */
 static char*
 jcodify (const char *name)
 {
-    return ccodify(name);
+    return codify(name);
 }
 
 /**************************************************/
diff netcdf-c/ncgen/genc.c cdf5/ncgen/genc.c
--- netcdf-c/ncgen/genc.c	2015-02-19 15:13:49.857088300 -0700
+++ cdf5/ncgen/genc.c	2014-11-14 14:54:46.093841200 -0700
@@ -1140,14 +1140,13 @@
 	codedump(stmt);
 	break;
 
-#ifdef USE_NETCDF4
     /* !usingclassic only (except NC_STRING) */
     case NC_UBYTE:
     case NC_USHORT:
     case NC_UINT:
     case NC_INT64:
     case NC_UINT64:
-	if(usingclassic) {
+	if(usingclassic && k_flag <= 2) {
 	    verror("Non-classic type: %s",nctypename(basetype->typ.typecode));
 	    return;
 	}
@@ -1180,7 +1179,6 @@
 		cname(asym));
 	codedump(stmt);
 	break;
-#endif
 
     default: /* User defined type */
 #ifndef USE_NETCDF4
diff netcdf-c/ncgen/genlib.h cdf5/ncgen/genlib.h
--- netcdf-c/ncgen/genlib.h	2014-11-14 15:14:32.052158900 -0700
+++ cdf5/ncgen/genlib.h	2014-11-14 14:54:46.094817700 -0700
@@ -160,7 +160,8 @@
 extern int format_attribute; /* 1 if format came from _FORMAT attribute */
 extern int enhanced_flag; /* 1 => netcdf-4 constructs appear in the parse */
 extern int specials_flag; /* 1 => special attributes are present */
-extern int usingclassic;   /* 1 => k_flag == 1|2 */
+extern int usingclassic;   /* 1 => k_flag == 1|2|5 */
+extern int k_flag;
 
 /* Global data */
 
diff netcdf-c/ncgen/jdata.c cdf5/ncgen/jdata.c
--- netcdf-c/ncgen/jdata.c	2014-11-14 15:15:16.659820900 -0700
+++ cdf5/ncgen/jdata.c	2014-11-14 13:32:35.107020400 -0700
@@ -50,17 +50,9 @@
 	bbprintf(codetmp,"%d",con->value.int32v);
 	break;
     case NC_FLOAT:
-	/* Special case for nan */
-	if(isnan(con->value.floatv))
-	    bbprintf(codetmp,"Float.NaN");
-	else
 	    bbprintf(codetmp,"%f",con->value.floatv);
 	break;
     case NC_DOUBLE:
-	/* Special case for nan */
-	if(isnan(con->value.doublev))
-	    bbprintf(codetmp,"Double.NaN");
-	else
 	    bbprintf(codetmp,"%lf",con->value.doublev);
 	break;
     case NC_UBYTE:
diff netcdf-c/ncgen/main.c cdf5/ncgen/main.c
--- netcdf-c/ncgen/main.c	2015-03-09 13:48:02.857710900 -0600
+++ cdf5/ncgen/main.c	2014-11-14 14:54:46.095794200 -0700
@@ -40,7 +40,7 @@
 int k_flag;    /* > 0  => -k was specified on command line*/
 int format_flag;   /* _Format attribute value (same range as -k flag) */
 int format_attribute; /* 1=>format came from format attribute */
-int enhanced_flag; /* 1 => netcdf-4 constructs appear in the parse */
+int enhanced_flag; /* 1 => netcdf-4/CDF-5 constructs appear in the parse */
 int specials_flag; /* 1=> special attributes are present */
 int usingclassic;
 int cmode_modifier;
@@ -87,6 +87,11 @@
     {"netCDF-4 classic model", 4},
     {"enhanced-nc3", 4},
 
+    /* CDF-5 format */
+    {"5", 5},
+    {"64-bit-data", 5},
+    {"64-bit data", 5},
+
     /* null terminate*/
     {NULL,0}
 };
@@ -286,15 +291,17 @@
         case 'k': /* for specifying variant of netCDF format to be generated
                      Possible values are:
                      1 (=> classic 32 bit)
-                     2 (=> classic 64 bit)
+                     2 (=> classic 64 bit offset, CDF-2)
                      3 (=> enhanced)
                      4 (=> classic, but stored in an enhanced file format)
+                     5 (=> classic 64 bit data, CDF-5)
                      Also provide string versions of above
                      "classic"
                      "64-bit-offset"
                      "64-bit offset"
 		     "enhanced" | "hdf5" | "netCDF-4"
                      "enhanced-nc3" | "hdf5-nc3" | "netCDF-4 classic model"
+                     "64-bit-data" | "64-bit data"
 		   */
 	    {
 		struct Kvalues* kvalue;
@@ -457,7 +464,7 @@
     if(enhanced_flag && k_flag == 0)
 	k_flag = 3;
 
-    if(enhanced_flag && k_flag != 3) {
+    if(enhanced_flag && k_flag != 3 && k_flag != 5) {
 	derror("-k or _Format conflicts with enhanced CDL input");
 	return 0;
     }
@@ -472,7 +479,7 @@
     if(k_flag == 0)
 	k_flag = 1;
 
-    usingclassic = (k_flag <= 2 || k_flag == 4)?1:0;
+    usingclassic = (k_flag <= 2 || k_flag == 4 || k_flag == 5)?1:0;
 
     /* compute cmode_modifier */
     switch (k_flag) {
@@ -480,6 +487,7 @@
     case 2: cmode_modifier = NC_64BIT_OFFSET; break;
     case 3: cmode_modifier = NC_NETCDF4; break;
     case 4: cmode_modifier = NC_NETCDF4 | NC_CLASSIC_MODEL; break;
+    case 5: cmode_modifier = NC_64BIT_DATA; break;
     default: ASSERT(0); /* cannot happen */
     }
 
diff netcdf-c/ncgen/Makefile.am cdf5/ncgen/Makefile.am
--- netcdf-c/ncgen/Makefile.am	2015-03-09 13:48:02.857710900 -0600
+++ cdf5/ncgen/Makefile.am	2014-11-14 14:54:46.092864700 -0700
@@ -22,7 +22,7 @@
 # These files all need to be distributed.
 EXTRA_DIST = ncgen.y ncgenyy.c ncgen.l $(man_MANS) internals.html	\
 run_tests.sh run_nc4_tests.sh c0.cdl c0_4.cdl ref_camrun.cdl \
-ncf199.cdl CMakeLists.txt XGetopt.c
+ncf199.cdl CMakeLists.txt XGetopt.c c5.cdl
 
 # This shell script causes ncgen to build a classic and a 64-bit
 # offset file from a cdl file shipped with the distribution.
@@ -34,7 +34,7 @@
 #endif # !BUILD_DLL
 
 CLEANFILES = c0.nc c0_64.nc c0_4.nc c0_4c.nc ref_camrun.c \
-		ncf199.nc
+		ncf199.nc c5.nc
 
 # These rule are used if someone wants to rebuild ncgenyy.c or ncgentab.c
 # Otherwise never invoked, but records how to do it.
diff netcdf-c/ncgen/ncgen.h cdf5/ncgen/ncgen.h
--- netcdf-c/ncgen/ncgen.h	2015-03-09 13:48:02.857710900 -0600
+++ cdf5/ncgen/ncgen.h	2014-11-14 14:54:46.096770700 -0700
@@ -103,7 +103,7 @@
 int k_flag;
 };
 
-#define NKVALUES 16
+#define NKVALUES 19
 extern struct Kvalues legalkinds[NKVALUES];
 
 /* Note: some non-var specials (i.e. _Format) are not included in this struct*/
diff netcdf-c/ncgen/run_tests.sh cdf5/ncgen/run_tests.sh
--- netcdf-c/ncgen/run_tests.sh	2014-04-14 17:59:18.106552500 -0600
+++ cdf5/ncgen/run_tests.sh	2014-11-14 14:54:46.096770700 -0700
@@ -8,6 +8,8 @@
 ./ncgen -b -o c0.nc $srcdir/c0.cdl
 echo "*** creating 64-bit offset file c0_64.nc from c0.cdl..."
 ./ncgen -k 64-bit-offset -b -o c0_64.nc $srcdir/c0.cdl
+echo "*** creating 64-bit offset file c5.nc from c5.cdl..."
+./ncgen -k 64-bit-data -b -o c5.nc $srcdir/c5.cdl
 
 echo "*** Test successful!"
 exit 0
diff netcdf-c/ncgen/semantics.c cdf5/ncgen/semantics.c
--- netcdf-c/ncgen/semantics.c	2014-11-14 15:15:16.659820900 -0700
+++ cdf5/ncgen/semantics.c	2014-11-14 14:54:46.111418200 -0700
@@ -825,13 +825,6 @@
         /* If we are in classic mode, then restrict the inferred type
            to the classic types */
 	switch (nctype) {
-	case NC_UBYTE:
-	    nctype = NC_SHORT;
-	    break;	
-	case NC_USHORT:
-	case NC_UINT:
-	case NC_INT64:
-	case NC_UINT64:
 	case NC_OPAQUE:
 	case NC_ENUM:
 	    nctype = NC_INT;
>>>>>>> ckp
diff netcdf-c/nctest/driver.c cdf5/nctest/driver.c
--- netcdf-c/nctest/driver.c	2014-11-14 15:14:32.067783300 -0700
+++ cdf5/nctest/driver.c	2014-11-14 14:54:46.112394700 -0700
@@ -49,8 +49,8 @@
 	     nc_set_default_format(NC_FORMAT_CLASSIC, NULL);
 	     fprintf(stderr, "\n\nSwitching to netCDF classic format.\n");
 	     break;
-	  case NC_FORMAT_64BIT:
-	     nc_set_default_format(NC_FORMAT_64BIT, NULL);
+	  case NC_FORMAT_CDF2:
+	     nc_set_default_format(NC_FORMAT_CDF2, NULL);
 	     fprintf(stderr, "\n\nSwitching to 64-bit offset format.\n");
 	     break;
 #ifdef USE_NETCDF4 
